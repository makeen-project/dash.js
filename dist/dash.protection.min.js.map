{"version":3,"sources":["node_modules/browser-pack/_prelude.js","/Users/danochiana/work/makeen/dash.js/externals/base64.js","/Users/danochiana/work/makeen/dash.js/src/core/FactoryMaker.js","/Users/danochiana/work/makeen/dash.js/src/core/events/CoreEvents.js","/Users/danochiana/work/makeen/dash.js/src/core/events/Events.js","/Users/danochiana/work/makeen/dash.js/src/core/events/EventsBase.js","/Users/danochiana/work/makeen/dash.js/src/streaming/constants/Constants.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/CommonEncryption.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/Protection.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/ProtectionEvents.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/controllers/ProtectionController.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/controllers/ProtectionKeyController.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/drm/KeySystemClearKey.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/drm/KeySystemPlayReady.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/drm/KeySystemWidevine.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/models/ProtectionModel_01b.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/models/ProtectionModel_21Jan2015.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/models/ProtectionModel_3Feb2014.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/servers/ClearKey.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/servers/DRMToday.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/servers/PlayReady.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/servers/Widevine.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/ClearKeyKeySet.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/KeyError.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/KeyMessage.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/KeyPair.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/KeySystemAccess.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/KeySystemConfiguration.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/MediaCapability.js","/Users/danochiana/work/makeen/dash.js/src/streaming/protection/vo/NeedKey.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","UTF8","encode","c","charCodeAt","push","decode","v","String","fromCharCode","join","BASE64","T","encodeArray","charAt","R","decodeArray","pop","ASCII","Uint8Array","encodeASCII","decodeASCII","FactoryMaker","extend","name","childInstance","override","context","extensionContext","getExtensionContext","instance","getSingletonInstance","className","singletonContexts","obj","setSingletonInstance","registerFactory","factory","factoriesArray","getFactoryByName","updateFactory","updateClassFactory","classFactories","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","undefined","create","merge","apply","arguments","updateSingletonFactory","singletonFactories","getSingletonFactoryByName","getSingletonFactory","getInstance","args","getClassName","extensionObject","extension","parent","prop","hasOwnProperty","extensions","forEach","CoreEvents","_EventsBase","_get","Object","getPrototypeOf","prototype","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_REQUESTED","INTERNAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","QUOTA_EXCEEDED","REPRESENTATION_UPDATED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_ADD","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_APPEND_COMPLETED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","TIMED_TEXT_REQUESTED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","VIDEO_CHUNK_RECEIVED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","Events","_CoreEvents","events","EventsBase","config","publicOnly","evt","indexOf","Constants","init","STREAM","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","MUXED","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","STPP","TTML","VTT","WVTT","SUGGESTED_PRESENTATION_DELAY","SCHEME_ID_URI","START_TIME","constants","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","_externalsBase642","__text","buffer","data","dv","done","byteCursor","size","nextBox","systemID","boxStart","byteLength","val","toString","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","setConfig","log","initialize","protectionModel","getProtectionModel","_controllersProtectionController2","adapter","eventBus","capabilities","setEncryptedMediaSupported","errHandler","videoElement","videoModel","getElement","onencrypted","mediaKeys","navigator","requestMediaKeySystemAccess","_modelsProtectionModel_21Jan20152","getAPI","APIS_ProtectionModel_3Feb2014","_modelsProtectionModel_3Feb20142","api","APIS_ProtectionModel_01b","_modelsProtectionModel_01b2","apis","keys","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","setMediaKeys","MediaKeys","release","error","message","ready","close","_coreFactoryMaker2","_ProtectionEvents2","ProtectionEvents","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","setup","keySystems","getKeySystems","pendingNeedKeyData","initialized","sessionType","robustnessLevel","_coreEventsEvents2","_Protection2","manifest","aInfo","vInfo","streamInfo","getStreamsInfo","audioInfo","getMediaInfoForType","_streamingConstantsConstants2","videoInfo","mediaInfo","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","selectKeySystem","createKeySession","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","currentInitData","getAllInitData","initDataEquals","trigger","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","on","onNeedKey","onKeyMessage","off","setSessionType","setRobustnessLevel","level","setProtectionData","protDataSet","reset","getProtData","protData","keySystemString","fromManifest","audioCapabilities","videoCapabilities","_voMediaCapability2","codec","ksConfig","_voKeySystemConfiguration2","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","sendLicenseRequestCompleteEvent","keyMessage","messageType","licenseServerData","getLicenseServer","eventData","getSessionID","isClearKey","clearkeys","processClearKeyLicenseRequest","updateKeySession","xhr","XMLHttpRequest","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","open","getHTTPMethod","responseType","getResponseType","onload","status","getLicenseMessage","response","statusText","readyState","getErrorResponse","onabort","onerror","updateHeaders","headers","key","withCredentials","setRequestHeader","httpRequestHeaders","getRequestHeadersFromMessage","send","getLicenseRequestFromMessage","initDataType","abInitData","ArrayBuffer","isView","getSupportedKeySystems","ProtectionKeyController","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","clearkeyKeySystem","getKeySystemBySystemString","initData1","initData2","data1","data2","j","cps","cpIdx","schemeIdURI","getInitData","shouldNotFilterOutKeySystem","_serversDRMToday2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","KeySystemClearKey","protectionData","clearkeySet","jsonMsg","JSON","parse","keyPairs","kids","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","parseInitDataFromContentProtection","KeySystemPlayReady","msg","xmlDoc","parser","DOMParser","dataview","messageFormat","Uint16Array","parseFromString","headerNameList","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","pro","prheader","setUint32","set","setPlayReadyMessageFormat","format","KeySystemWidevine","ProtectionModel_01b","pendingSessions","sessions","eventHandler","createEventHandler","removeEventListeners","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","_voKeySystemAccess2","mediaElement","addEventListener","moreSessionsAllowed","newSession","getExpirationTime","NaN","getSessionType","keyID","handleEvent","type","_voNeedKey2","findSessionByID","sessionId","errorCode","systemCode","_voKeyError2","shift","mediaKeyMessageError","_voKeyMessage2","defaultURL","sessionArray","len","removeEventListener","ProtectionModel_21Jan2015","numSessions","session","removeSession","then","closed","closeKeySessionInternal","requestKeySystemAccessInternal","mksa","createMediaKeys","mkeys","createSession","createSessionToken","generateRequest","toJWK","update","load","success","remove","idx","mediaKeySystemAccess","configuration","getConfiguration","token","splice","expiration","getKeyStatuses","keyStatuses","ProtectionModel_3Feb2014","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","boundDoSetKeys","doSetKeys","bind","keySession","destinationURL","ClearKey","substring","serverResponse","keypair","keyid","kid","replace","k","DRMToday","keySystemStr","com.widevine.alpha","license","com.microsoft.playready","PlayReady","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","stringify","buf","bView","KeyError","errorString","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey"],"mappings":";CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,SAAAL,EAAAK,YAAAC,WAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAC,EAAA1B,EAAAD,eCKA,IAAI4B,KACJA,GAAKC,OAAS,SAASd,GAEnB,IAAK,GADDE,MACKG,EAAI,EAAGA,EAAIL,EAAEU,SAAUL,EAAG,CAC/B,GAAIU,GAAIf,EAAEgB,WAAWX,EACjBU,GAAI,IACJb,EAAEe,KAAKF,GACAA,EAAI,MACXb,EAAEe,KAAK,IAAQF,GAAK,GACpBb,EAAEe,KAAK,IAAQ,GAAKF,IACbA,EAAI,OACXb,EAAEe,KAAK,IAAQF,GAAK,IACpBb,EAAEe,KAAK,IAAQ,GAAMF,GAAK,GAC1Bb,EAAEe,KAAK,IAAQ,GAAKF,KAEpBb,EAAEe,KAAK,IAAQF,GAAK,IACpBb,EAAEe,KAAK,IAAQ,GAAMF,GAAK,IAC1Bb,EAAEe,KAAK,IAAQ,GAAMF,GAAK,GAC1Bb,EAAEe,KAAK,IAAQ,GAAKF,IAG5B,MAAOb,IAEXW,EAAKK,OAAS,SAAShB,GAGnB,IAFA,GAAIC,MACAE,EAAI,EACDA,EAAIH,EAAEQ,QAAQ,CACjB,GAAIS,GAAIjB,EAAEG,IACNc,GAAI,MAEGA,EAAI,KACXA,GAAK,GAAKA,IAAM,EAChBA,GAAM,GAAKjB,EAAEG,MACNc,EAAI,KACXA,GAAK,GAAKA,IAAM,GAChBA,IAAM,GAAKjB,EAAEG,OAAS,EACtBc,GAAM,GAAKjB,EAAEG,OAEbc,GAAK,EAAIA,IAAM,GACfA,IAAM,GAAKjB,EAAEG,OAAS,GACtBc,IAAM,GAAKjB,EAAEG,OAAS,EACtBc,GAAM,GAAKjB,EAAEG,OAEjBF,EAAEc,KAAKG,OAAOC,aAAaF,IAE/B,MAAOhB,GAAEmB,KAAK,IAGlB,IAAIC,OACJ,SAAUC,GACN,GAAIC,GAAc,SAASvB,GAIvB,IAHA,GAAIG,GAAI,EACJF,KACAL,EAAI,EAAKI,EAAEQ,OAAS,EACjB,EAAIZ,KAAK,CACZ,GAAIqB,IAAKjB,EAAEG,IAAM,KAAOH,EAAEG,EAAE,IAAM,GAAKH,EAAEG,EAAE,EAC3CA,IAAK,EACLF,EAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BhB,EAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BhB,EAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,IAC3BhB,EAAEc,KAAKO,EAAEE,OAAO,GAAKP,IAEzB,GAAI,GAAMjB,EAAEQ,OAASL,EAAI,CACrB,GAAIc,IAAKjB,EAAEG,IAAM,KAAOH,EAAEG,EAAE,IAAM,EAClCF,GAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BhB,EAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BhB,EAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,IAC3BhB,EAAEc,KAAK,SACJ,IAAI,GAAMf,EAAEQ,OAASL,EAAI,CAC5B,GAAIc,GAAKjB,EAAEG,IAAM,EACjBF,GAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BhB,EAAEc,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BhB,EAAEc,KAAK,MAEX,MAAOd,GAAEmB,KAAK,KAEdK,EAAI,WAEJ,IAAK,GADDxB,MACKE,EAAE,EAAGA,EAAEmB,EAAEd,SAAUL,EACxBF,EAAEqB,EAAER,WAAWX,IAAMA,CAGzB,OADAF,GAAE,IAAIa,WAAW,IAAM,EAChBb,KAEPyB,EAAc,SAAS5B,GAIvB,IAHA,GAAIK,GAAI,EACJH,KACAJ,EAAI,EAAKE,EAAEU,OAAS,EACjB,EAAIZ,KAAK,CACZ,GAAIqB,IAAKQ,EAAE3B,EAAEgB,WAAWX,KAAO,KAAOsB,EAAE3B,EAAEgB,WAAWX,EAAE,KAAO,KAAOsB,EAAE3B,EAAEgB,WAAWX,EAAE,KAAO,GAAKsB,EAAE3B,EAAEgB,WAAWX,EAAE,GACnHH,GAAEe,KAAK,IAAOE,GAAK,IACnBjB,EAAEe,KAAK,IAAOE,GAAK,GACnBjB,EAAEe,KAAK,IAAME,GACbd,GAAK,EAUT,MARIH,KACI,KAAOF,EAAE0B,OAAOrB,EAAE,IAClBH,EAAE2B,MACF3B,EAAE2B,OACK,KAAO7B,EAAE0B,OAAOrB,EAAE,IACzBH,EAAE2B,OAGH3B,GAEP4B,IACJA,GAAMhB,OAAS,SAASd,GAEpB,IAAK,GADDE,MACKG,EAAI,EAAGA,EAAEL,EAAEU,SAAUL,EAC1BH,EAAEe,KAAKjB,EAAEgB,WAAWX,GAExB,OAAOH,IAEX4B,EAAMZ,OAAS,SAAShB,GACpB,IAAK,GAAIG,GAAI,EAAGA,EAAEL,EAAEU,SAAUL,EAC1BF,EAAEE,GAAKe,OAAOC,aAAalB,EAAEE,GAEjC,OAAOF,GAAEmB,KAAK,KAElBC,EAAOK,YAAc,SAAS5B,GAC1B,GAAIE,GAAI0B,EAAY5B,EACpB,OAAO,IAAI+B,YAAW7B,IAE1BqB,EAAOS,YAAc,SAAShC,GAC1B,GAAIE,GAAI4B,EAAMhB,OAAOd,EACrB,OAAOyB,GAAYvB,IAEvBqB,EAAOU,YAAc,SAASjC,GAC1B,GAAIG,GAAIyB,EAAY5B,EACpB,OAAO8B,GAAMZ,OAAOf,IAExBoB,EAAOT,OAAS,SAASd,GACrB,GAAIE,GAAIW,EAAKC,OAAOd,EACpB,OAAOyB,GAAYvB,IAEvBqB,EAAOL,OAAS,SAASlB,GACrB,GAAIE,GAAI0B,EAAY5B,EACpB,OAAOa,GAAKK,OAAOhB,KAExB,wEAYoB,KAAZjB,IACPA,EAAQiC,OAASK,EAAOL,OACxBjC,EAAQ2C,YAAcL,EAAOK,kGC7HjC,IAAIM,GAAgB,WAQhB,QAASC,GAAOC,EAAMC,EAAeC,EAAUC,GAC3C,GAAIC,GAAmBC,EAAoBF,IACtCC,EAAiBJ,IAASC,IAC3BG,EAAiBJ,IACbM,SAAUL,EACVC,SAAUA,IAiBtB,QAASK,GAAqBJ,EAASK,GACnC,IAAK,GAAIvC,KAAKwC,GAAmB,CAC7B,GAAIC,GAAMD,EAAkBxC,EAC5B,IAAIyC,EAAIP,UAAYA,GAAWO,EAAIV,OAASQ,EACxC,MAAOE,GAAIJ,SAGnB,MAAO,MAYX,QAASK,GAAqBR,EAASK,EAAWF,GAC9C,IAAK,GAAIrC,KAAKwC,GAAmB,CAC7B,GAAIC,GAAMD,EAAkBxC,EAC5B,IAAIyC,EAAIP,UAAYA,GAAWO,EAAIV,OAASQ,EAExC,YADAC,EAAkBxC,GAAGqC,SAAWA,GAIxCG,EAAkB5B,MACdmB,KAAMQ,EACNL,QAASA,EACTG,SAAUA,IAUlB,QAASM,GAAgBZ,EAAMa,EAASC,GACpC,IAAK,GAAI7C,KAAK6C,GAAgB,CAE1B,GADUA,EAAe7C,GACjB+B,OAASA,EAEb,YADAc,EAAe7C,GAAG4C,QAAUA,GAIpCC,EAAejC,MACXmB,KAAMA,EACNa,QAASA,IAIjB,QAASE,GAAiBf,EAAMc,GAC5B,IAAK,GAAI7C,KAAK6C,GAAgB,CAE1B,GADUA,EAAe7C,GACjB+B,OAASA,EACb,MAAOc,GAAe7C,GAAG4C,QAGjC,MAAO,MAGX,QAASG,GAAchB,EAAMa,EAASC,GAClC,IAAK,GAAI7C,KAAK6C,GAAgB,CAE1B,GADUA,EAAe7C,GACjB+B,OAASA,EAEb,YADAc,EAAe7C,GAAG4C,QAAUA,IAYxC,QAASI,GAAmBjB,EAAMa,GAC9BG,EAAchB,EAAMa,EAASK,GAGjC,QAASC,GAAsBnB,GAC3B,MAAOe,GAAiBf,EAAMkB,GAGlC,QAASE,GAAgBC,GACrB,GAAIR,GAAUE,EAAiBM,EAAiBC,sBAAuBJ,EAkBvE,OAhBKL,KACDA,EAAU,SAAUV,GAIhB,WAHgBoB,KAAZpB,IACAA,OAGAqB,OAAQ,WACJ,MAAOC,GAAMJ,EAAiBC,sBAAuBD,EAAiBK,OAClEvB,QAASA,GACVwB,WAAYxB,EAASwB,cAKpCf,EAAgBS,EAAiBC,sBAAuBT,EAASK,IAE9DL,EASX,QAASe,GAAuB5B,EAAMa,GAClCG,EAAchB,EAAMa,EAASgB,GAGjC,QAASC,GAA0B9B,GAC/B,MAAOe,GAAiBf,EAAM6B,GAGlC,QAASE,GAAoBV,GACzB,GAAIR,GAAUE,EAAiBM,EAAiBC,sBAAuBO,EA+BvE,OA9BKhB,KACDA,EAAU,SAAUV,GAChB,GAAIG,OAAQiB,EAIZ,YAHgBA,KAAZpB,IACAA,OAGA6B,YAAa,WAgBT,MAdK1B,KACDA,EAAWC,EAAqBJ,EAASkB,EAAiBC,wBAGzDhB,IACDA,EAAWmB,EAAMJ,EAAiBC,sBAAuBD,EAAiBK,OACtEvB,QAASA,GACVwB,WAAYxB,EAASwB,WACxBlB,EAAkB5B,MACdmB,KAAMqB,EAAiBC,sBACvBnB,QAASA,EACTG,SAAUA,KAGXA,KAInBM,EAAgBS,EAAiBC,sBAAuBT,EAASgB,IAG9DhB,EAGX,QAASY,GAAMzB,EAAMqB,EAAkBlB,EAAS8B,GAE5CZ,EAAiBa,aAAe,WAAa,MAAOlC,GAEpD,IAAII,GAAmBC,EAAoBF,GACvCgC,EAAkB/B,EAAiBJ,EACvC,IAAImC,EAAiB,CACjB,GAAIC,GAAYD,EAAgB7B,QAChC,KAAI6B,EAAgBjC,SAYhB,MAAOkC,GAAUV,OACbvB,QAASA,EACTU,QAASP,GACV2B,EAdHG,GAAYA,EAAUV,OAClBvB,QAASA,EACTU,QAASP,EACT+B,OAAQhB,GACTY,EACH,KAAK,GAAMK,KAAQF,GACXf,EAAiBkB,eAAeD,KAChCjB,EAAiBiB,GAAQF,EAAUE,IAUnD,MAAOjB,GAGX,QAAShB,GAAoBF,GACzB,GAAIC,OAAgBmB,EASpB,OARAiB,GAAWC,QAAQ,SAAU/B,GACrBA,IAAQP,IACRC,EAAmBM,KAGtBN,IACDA,EAAmBoC,EAAW3D,KAAKsB,IAEhCC,EAlOX,GAAIE,OAAQiB,GACRiB,KACA/B,KACAoB,KACAX,IA6OJ,OAZAZ,IACIP,OAAQA,EACRQ,qBAAsBA,EACtBI,qBAAsBA,EACtBoB,oBAAqBA,EACrBD,0BAA2BA,EAC3BF,uBAAwBA,EACxBR,gBAAiBA,EACjBD,sBAAuBA,EACvBF,mBAAoBA,gBAObnB,m3BC1PQ,UASjB4C,EAAU,SAAAC,GACA,QADVD,YAAAA,GAEEE,EAAAC,OAAAC,eAFFJ,EAAUK,WAAA,cAAA1F,MAAAgB,KAAAhB,MAGRA,KAAK2F,oBAAsB,qBAC3B3F,KAAK4F,eAAiB,gBACtB5F,KAAK6F,qBAAuB,qBAC5B7F,KAAK8F,eAAiB,gBACtB9F,KAAK+F,8BAAgC,6BACrC/F,KAAKgG,sBAAwB,sBAC7BhG,KAAKiG,sBAAwB,sBAC7BjG,KAAKkG,oBAAsB,oBAC3BlG,KAAKmG,sBAAwB,uBAC7BnG,KAAKoG,qBAAuB,qBAC5BpG,KAAKqG,eAAiB,gBACtBrG,KAAKsG,yBAA2B,yBAChCtG,KAAKuG,2BAA6B,0BAClCvG,KAAKwG,kBAAoB,mBACzBxG,KAAKyG,iBAAmB,kBACxBzG,KAAK0G,iBAAmB,kBACxB1G,KAAK2G,sBAAwB,sBAC7B3G,KAAK4G,eAAiB,gBACtB5G,KAAK6G,uBAAyB,wBAC9B7G,KAAK8G,gBAAkB,iBACvB9G,KAAK+G,+BAAiC,8BACtC/G,KAAKgH,mCAAqC,kCAC1ChH,KAAKiH,8BAAgC,8BACrCjH,KAAKkH,8BAAgC,8BACrClH,KAAKmH,iBAAmB,kBACxBnH,KAAKoH,2BAA6B,2BAClCpH,KAAKqH,iBAAmB,kBACxBrH,KAAKsH,qBAAuB,qBAC5BtH,KAAKuH,+BAAiC,8BACtCvH,KAAKwH,sBAAwB,sBAC7BxH,KAAKyH,qBAAuB,qBAC5BzH,KAAK0H,uBAAyB,uBAC9B1H,KAAK2H,qBAAuB,qBAC5B3H,KAAK4H,YAAc,sBApCrBvC,EAAUC,GAAVD,wBAwCSA,s3BC7CQ,UACjBwC,EAAM,SAAAC,WAAND,YAAAA,2BAAAA,EAAMnC,WAAA,cAAA1F,MAAAqE,MAAArE,KAAAsE,oBAANuD,EAAMC,GAAND,cAEFE,EAAS,GAAIF,aACFE,scCJTC,EAAU,mBAAVA,YAAAA,YAAAA,uBACK,SAACD,EAAQE,GACZ,GAAKF,EAAL,CAEA,GAAIlF,KAAWoF,GAASA,EAAOpF,SAC3BqF,IAAaD,GAASA,EAAOC,UAGjC,KAAK,GAAMC,KAAOJ,IACTA,EAAO7C,eAAeiD,IAASnI,KAAKmI,KAAStF,GAC9CqF,IAAkD,IAApCH,EAAOI,GAAKC,QAAQ,aACtCpI,KAAKmI,GAAOJ,EAAOI,SAXzBH,eAiBSA,mcCfTK,EAAS,WA0BC,QA1BVA,YAAAA,GA2BErI,KAAKsI,gBA3BPD,qBAEG,WACDrI,KAAKuI,OAAS,SACdvI,KAAKwI,MAAQ,QACbxI,KAAKyI,MAAQ,QACbzI,KAAK0I,KAAO,OACZ1I,KAAK2I,gBAAkB,iBACvB3I,KAAK4I,cAAgB,eACrB5I,KAAK6I,MAAQ,QACb7I,KAAK8I,SAAW,WAChB9I,KAAK+I,WAAa,aAClB/I,KAAKgJ,aAAe,UACpBhJ,KAAKiJ,YAAc,SACnBjJ,KAAKkJ,IAAM,MACXlJ,KAAKmJ,IAAM,MACXnJ,KAAKoJ,KAAO,OACZpJ,KAAKqJ,KAAO,OACZrJ,KAAKsJ,IAAM,MACXtJ,KAAKuJ,KAAO,OACZvJ,KAAKoB,KAAO,QACZpB,KAAKwJ,6BAA+B,6BACpCxJ,KAAKyJ,cAAgB,cACrBzJ,KAAK0J,WAAa,gBAvBpBrB,KA+BFsB,EAAY,GAAItB,aACLsB,0fCrCI,UAEbC,EAAgB,mBAAhBA,YAAAA,YAAAA,EAAgB,6CASc,SAACC,GAE7B,IAAK,GADDC,GAAS,KACJlJ,EAAI,EAAGA,EAAIiJ,EAAQ5I,SAAUL,EAAG,CACrC,GAAImJ,GAAKF,EAAQjJ,EACoB,sCAAjCmJ,EAAGC,YAAYC,eACgB,SAA3BF,EAAGG,MAAMD,gBACbH,EAASC,GAEjB,MAAOD,8BASO,SAACK,GACf,GAAIC,GAAS,EACTC,EAAO,GAAIC,UAASH,GAGpBI,EAAUF,EAAKG,SAASJ,EAS5B,OAPAA,IAAU,GAENG,EAAU,IACVH,GAAU,EAAK,GAAKC,EAAKI,UAAUL,IAGvCA,GAAU,EACHD,EAAKO,MAAMN,sCAaI,SAACO,EAAWC,GAClC,GAAIC,GAAWjB,EAAiBkB,cAAcF,EAC9C,OAAIC,GAAS3F,eAAeyF,EAAUI,KAAKd,eAChCY,EAASF,EAAUI,KAAKd,eAE5B,uDAU8B,SAACe,GACtC,MAAI,QAAUA,GACHC,EAAA,QAAO9I,YAAY6I,EAAOb,KAAKe,QAAQC,OAE3C,kCAYS,SAACC,GAEjB,GAAa,OAATA,EACA,QAQJ,KANA,GAAIC,GAAK,GAAIf,UAASc,GAClBE,GAAO,EACPnB,KAGAoB,EAAa,GACTD,GAAM,CAEV,GAAIE,OAAItH,GACJuH,MAAOvH,GACPqG,MAAOrG,GACPwH,MAAQxH,GAERyH,EAAWJ,CAEf,IAAIA,GAAcF,EAAGF,OAAOS,WACxB,KAQJ,IALAJ,EAAOH,EAAGZ,UAAUc,GACpBE,EAAUF,EAAaC,EACvBD,GAAc,EAGmB,aAA7BF,EAAGZ,UAAUc,GAQjB,GAJAA,GAAc,EAIE,KADhBhB,EAAUc,EAAGb,SAASe,KACW,IAAZhB,EAArB,CAIAgB,IAEAA,GAAc,EAGdG,EAAW,EACX,IAAI9K,OAACsD,GAAE2H,MAAG3H,EACV,KAAKtD,EAAI,EAAGA,EAAI,EAAGA,IACfiL,EAAMR,EAAGb,SAASe,EAAa3K,GAAGkL,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAK5K,OAAgB,IAAM4K,EAAMA,CAIjD,KAFAN,GAAc,EACdG,GAAY,IACP9K,EAAI,EAAGA,EAAI,EAAGA,IACfiL,EAAMR,EAAGb,SAASe,EAAa3K,GAAGkL,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAK5K,OAAgB,IAAM4K,EAAMA,CAIjD,KAFAN,GAAc,EACdG,GAAY,IACP9K,EAAI,EAAGA,EAAI,EAAGA,IACfiL,EAAMR,EAAGb,SAASe,EAAa3K,GAAGkL,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAK5K,OAAgB,IAAM4K,EAAMA,CAIjD,KAFAN,GAAc,EACdG,GAAY,IACP9K,EAAI,EAAGA,EAAI,EAAGA,IACfiL,EAAMR,EAAGb,SAASe,EAAa3K,GAAGkL,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAK5K,OAAgB,IAAM4K,EAAMA,CAIjD,KAFAN,GAAc,EACdG,GAAY,IACP9K,EAAI,EAAGA,EAAI,EAAGA,IACfiL,EAAMR,EAAGb,SAASe,EAAa3K,GAAGkL,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAK5K,OAAgB,IAAM4K,EAAMA,CAEjDN,IAAc,EAEdG,EAAWA,EAASzB,cAGLoB,EAAGZ,UAAUc,GAC5BA,GAAc,EAGdpB,EAAKuB,GAAYL,EAAGF,OAAOT,MAAMiB,EAAUF,GAC3CF,EAAaE,MAhDTF,GAAaE,MARbF,GAAaE,EA2DrB,MAAOtB,OA7KTP,eAiLSA,iHC5Gf,QAAS1J,KAaL,QAAS6L,GAAuB9D,GAE5B,GAAI+D,GAAa,KAEbC,GAA0B,EAAAC,EAAA,SAAwBpJ,GAAS6B,aAC/DsH,GAAwBE,WAAWC,IAAKnE,EAAOmE,MAC/CH,EAAwBI,YAExB,IAAIC,GAAmBC,EAAmBtE,EAY1C,QAVK+D,GAAcM,IACfN,GAAa,EAAAQ,EAAA,SAAqB1J,GAASqB,QACvCmI,gBAAiBA,EACjBL,wBAAyBA,EACzBQ,QAASxE,EAAOwE,QAChBC,SAAUzE,EAAOyE,SACjBN,IAAKnE,EAAOmE,MAEhBnE,EAAO0E,aAAaC,4BAA2B,IAE5CZ,EAGX,QAASO,GAAmBtE,GAExB,GAAImE,GAAMnE,EAAOmE,IACbM,EAAWzE,EAAOyE,SAClBG,EAAa5E,EAAO4E,WACpBC,EAAe7E,EAAO8E,WAAWC,YAErC,YAAiC9I,KAA7B4I,EAAaG,iBACc/I,KAA3B4I,EAAaI,eAC6BhJ,KAA1CiJ,UAAUC,6BACuC,kBAA1CD,WAAUC,6BAEjBhB,EAAI,iEACG,EAAAiB,EAAA,SAA0BvK,GAASqB,QAAQiI,IAAKA,EAAKM,SAAUA,KAE/DY,EAAOR,EAAcS,IAE5BnB,EAAI,gEACG,EAAAoB,EAAA,SAAyB1K,GAASqB,QAAQiI,IAAKA,EAAKM,SAAUA,EAAUe,IAAKH,EAAOR,EAAcS,MAElGD,EAAOR,EAAcY,IAE5BtB,EAAI,2DACG,EAAAuB,EAAA,SAAoB7K,GAASqB,QAAQiI,IAAKA,EAAKM,SAAUA,EAAUG,WAAYA,EAAYY,IAAKH,EAAOR,EAAcY,OAI5HtB,EAAI,4GACG,MAKf,QAASkB,GAAOR,EAAcc,GAE1B,IAAK,GAAIhN,GAAI,EAAGA,EAAIgN,EAAK3M,OAAQL,IAAK,CAClC,GAAI6M,GAAMG,EAAKhN,EAGf,IAAsD,kBAA3CkM,GAAaW,EAAIjI,OAAOqI,KAAKJ,GAAK,KAI7C,MAAOA,GAGX,MAAO,MAhFX,GACI3K,GAAU9C,KAAK8C,OAsFnB,QAHIiJ,uBAAwBA,4DA9JC,eACG,eACP,cACS,eACD,eACL,eACP,UAEnB2B,IAIEI,mBAAoB,qBACpBC,OAAQ,SACRC,iBAAkB,mBAGlBC,QAAS,UACTC,SAAU,WACVC,SAAU,WACVC,WAAY,eAKZN,mBAAoB,2BACpBC,OAAQ,eACRC,iBAAkB,yBAGlBC,QAAS,gBACTC,SAAU,iBACVC,SAAU,iBACVC,WAAY,qBAIdb,IAKEc,aAAc,eAEdC,UAAW,YAEXC,QAAS,QAGTN,QAAS,UACTO,MAAO,WACPC,QAAS,aACTC,MAAO,WACPC,MAAO,aAKPN,aAAc,iBAEdC,UAAW,cAEXC,QAAS,QAETN,QAAS,YACTO,MAAO,aACPC,QAAS,eACTC,MAAO,aACPC,MAAO,cAgGfzO,GAAW+D,sBAAwB,YACnC,IAAIT,GAAUoL,EAAA,QAAa7K,gBAAgB7D,EAC3CsD,GAAQuE,OAAM8G,EAAA,QACdD,EAAA,QAAahL,mBAAmB1D,EAAW+D,sBAAuBT,aACnDA,w5BCxKQ,UAKjBsL,EAAgB,SAAAxJ,GAMN,QANVwJ,YAAAA,GAOEvJ,EAAAC,OAAAC,eAPFqJ,EAAgBpJ,WAAA,cAAA1F,MAAAgB,KAAAhB,MAedA,KAAK+O,qBAAuB,qBAO5B/O,KAAKgP,6BAA+B,4BAWpChP,KAAKiP,UAAY,kBAMjBjP,KAAKkP,UAAY,kBAOjBlP,KAAKmP,YAAc,oBAOnBnP,KAAKoP,mBAAqB,0BAO1BpP,KAAKqP,oBAAsB,2BAO3BrP,KAAKsP,oBAAsB,2BAQ3BtP,KAAKuP,qBAAuB,4BAO5BvP,KAAKwP,2BAA6B,0BAOlCxP,KAAKyP,oBAAsB,2BAO3BzP,KAAK0P,yBAA2B,gCAMhC1P,KAAK2P,SAAW,UAMhB3P,KAAK4P,mBAAqB,2BAM1B5P,KAAK6P,qBAAuB,6BAO5B7P,KAAK8P,2BAA6B,2BAOlC9P,KAAK+P,kBAAqB,6BAO1B/P,KAAKgQ,uBAAyB,gCAvIhClB,EAAgBxJ,GAAhBwJ,cA2IFmB,EAAmB,GAAInB,aACZmB,kHC1Hf,QAASC,GAAqBjI,GAmB1B,QAASkI,KACLC,EAAanE,EAAwBoE,gBACrCC,KACAC,GAAc,EACdC,EAAc,YACdC,EAAkB,GAElBC,EAAA,QAAOhO,OAAOiO,EAAA,QAAW5I,QAkB7B,QAASsE,GAAWuE,EAAUC,EAAOC,GAMjC,IAAKP,EAAa,CAEd,GAAIQ,OAAU7M,EAET2M,IAAUC,IAGXC,EAAatE,EAAQuE,iBAAiB,IAG1CC,EAAYJ,IAAUE,EAAatE,EAAQyE,oBAAoBH,EAAYI,EAAA,QAAU1I,OAAS,MAC9F2I,EAAYN,IAAUC,EAAatE,EAAQyE,oBAAoBH,EAAYI,EAAA,QAAU3I,OAAS,KAC9F,IAAI6I,GAAYD,GAA0BH,EAItCK,EAAcrF,EAAwBsF,4CAA4CF,EAAUG,kBAC5FF,IAAeA,EAAYrQ,OAAS,GACpCwQ,EAAgBH,GAAa,GAGjCf,GAAc,GAiBtB,QAASmB,GAAiB9G,GACtB,GAAI+G,GAAgBC,EAAA,QAAiBC,oBAAoBlH,EAAWC,EACpE,IAAI+G,EAAe,CAIf,IAAK,GADDG,GAAkBxF,EAAgByF,iBAC7BnR,EAAI,EAAGA,EAAIkR,EAAgB7Q,OAAQL,IACxC,GAAIqL,EAAwB+F,eAAeL,EAAeG,EAAgBlR,IAEtE,WADAwL,GAAI,0DAIZ,KACIE,EAAgBoF,iBAAiBC,EAAenB,GAClD,MAAOhC,GACL9B,EAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAM,KAAMoD,MAAO,+BAAiCA,EAAMC,eAG5G/B,GAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAM,KAAMoD,MAAO,0BAA4B7D,EAAUuH,aAAe,sFAa9H,QAASC,GAAeC,GACpB9F,EAAgB6F,eAAeC,GAenC,QAASC,GAAiBC,GACtBhG,EAAgB+F,iBAAiBC,GAarC,QAASC,GAAgBD,GACrBhG,EAAgBiG,gBAAgBD,GAcpC,QAASE,GAAqBC,GAC1BnG,EAAgBkG,qBAAqBC,GAazC,QAASC,GAAgBC,GACjBA,GACArG,EAAgBoG,gBAAgBC,GAChCjG,EAASkG,GAAGlC,EAAA,QAAOf,SAAUkD,EAAW7S,MACxC0M,EAASkG,GAAGlC,EAAA,QAAO3B,qBAAsB+D,EAAc9S,OACpC,OAAZ2S,IACPrG,EAAgBoG,gBAAgBC,GAChCjG,EAASqG,IAAIrC,EAAA,QAAOf,SAAUkD,EAAW7S,MACzC0M,EAASqG,IAAIrC,EAAA,QAAO3B,qBAAsB+D,EAAc9S,OAYhE,QAASgT,GAAe9I,GACpBsG,EAActG,EAWlB,QAAS+I,GAAmBC,GACxBzC,EAAkByC,EAYtB,QAASC,GAAkB/H,GACvBgI,EAAchI,EAYlB,QAASiI,KACLX,EAAgB,MAEhB/H,MAAYzG,GAERoI,IACAA,EAAgB+G,QAChB/G,EAAkB,MAQ1B,QAASgH,GAAY3I,GACjB,GAAI4I,GAAW,KACXC,EAAkB7I,EAAUuH,YAKhC,OAHIkB,KACAG,EAAWC,IAAoBJ,GAAeA,EAAYI,GAAmB,MAE1ED,EAGX,QAAS9B,GAAgBH,EAAamC,GAElC,GAAI1T,GAAOC,KAGP0T,KACAC,IAEAvC,IACAuC,EAAkBnS,KAAK,GAAAoS,GAAA,QAAoBxC,EAAUyC,MAAOpD,IAE5DQ,GACAyC,EAAkBlS,KAAK,GAAAoS,GAAA,QAAoB3C,EAAU4C,MAAOpD,GAEhE,IAAIqD,GAAW,GAAAC,GAAA,QACPL,EAAmBC,EAAmB,WACrB,cAAjBnD,EAAgC,WAAa,YAC5CA,IACLwD,KAEAC,MAAK/P,EACT,IAAIyG,GAEA,IAAKsJ,EAAQ,EAAGA,EAAQ3C,EAAYrQ,OAAQgT,IACxC,GAAItJ,IAAc2G,EAAY2C,GAAOC,GAAI,kBAErCF,EAAoBxS,MAAM0S,GAAI5C,EAAY2C,GAAOC,GAAIC,SAAUL,IAI/D,IAAIM,GAA4B,QAA5BA,GAAsCC,GACtC3H,EAASqG,IAAIrC,EAAA,QAAOlB,2BAA4B4E,EAA2BrU,GACvEsU,EAAM7F,MACDiF,GACD/G,EAASuF,QAAQvB,EAAA,QAAOjB,qBAAsBjB,MAAO,oCAAsC6F,EAAM7F,SAGrGpC,EAAI,iCACJM,EAASuF,QAAQvB,EAAA,QAAOjB,qBAAsBrE,KAAMiJ,EAAMjJ,OAC1DsG,EAAiBJ,EAAY2C,GAAOrJ,WAK5C,OAFA8B,GAASkG,GAAGlC,EAAA,QAAOlB,2BAA4B4E,EAA2BrU,GAC1EuM,EAAgBgI,uBAAuBN,GACvC,0BAAA,WAIP,QAAkB9P,KAAdyG,EAAyB,IA0B1B4J,eAxBJ5J,EAAY,KACZ2F,EAAmB9O,KAAK8P,EAGxB,KAAK,GAAI1Q,GAAI,EAAGA,EAAI0Q,EAAYrQ,OAAQL,IACpCoT,EAAoBxS,MAAM0S,GAAI5C,EAAY1Q,GAAGsT,GAAIC,SAAUL,IAG/D,IAAIU,OAAetQ,GACbkQ,EAA4B,QAA5BA,GAAsCC,GACxC3H,EAASqG,IAAIrC,EAAA,QAAOlB,2BAA4B4E,EAA2BrU,GACvEsU,EAAM7F,OACN7D,MAAYzG,GACZwI,EAASqG,IAAIrC,EAAA,QAAO1B,6BAA8BuF,EAAqBxU,GAElE0T,GACD/G,EAASuF,QAAQvB,EAAA,QAAOjB,qBAAsBrE,KAAM,KAAMoD,MAAO,oCAAsC6F,EAAM7F,UAGjHgG,EAAkBH,EAAMjJ,KACxBgB,EAAI,kCAAoCoI,EAAgB7J,UAAUuH,aAAe,+BACjF5F,EAAgBmF,gBAAgB+C,IAGpCD,GAAsB,QAAtBA,GAAgCF,GAGhC,GAFA3H,EAASqG,IAAIrC,EAAA,QAAO1B,6BAA8BuF,EAAqBxU,GACvE2M,EAASqG,IAAIrC,EAAA,QAAOlB,2BAA4B4E,EAA2BrU,GACtEsU,EAAM7F,MAiBP7D,MAAYzG,GACPuP,GACD/G,EAASuF,QAAQvB,EAAA,QAAOjB,qBAAsBrE,KAAM,KAAMoD,MAAO,uCAAyC6F,EAAM7F,YAnBtG,CACd7D,EAAY2B,EAAgBmI,eAC5B/H,EAASuF,QAAQvB,EAAA,QAAOjB,qBAAsBrE,KAAMoJ,GAEpD,IAAIjB,GAAWD,EAAY3I,EACvB4I,IAAYA,EAASd,mBAAqBc,EAASd,kBAAkBxR,OAAS,GAC9EqL,EAAgBkG,qBAAqBvH,EAAA,QAAO9I,YAAYoR,EAASd,mBAAmBtH,OAExF,KAAK,GAAIvK,GAAI,EAAGA,EAAI0P,EAAmBrP,OAAQL,IAC3C,IAAKqT,EAAQ,EAAGA,EAAQ3D,EAAmB1P,GAAGK,OAAQgT,IAClD,GAAItJ,IAAc2F,EAAmB1P,GAAGqT,GAAOC,GAAI,CAC/CxC,EAAiBpB,EAAmB1P,GAAGqT,GAAOrJ,SAC9C,UAWpB8B,EAASkG,GAAGlC,EAAA,QAAO1B,6BAA8BuF,EAAqBxU,GACtE2M,EAASkG,GAAGlC,EAAA,QAAOlB,2BAA4B4E,EAA2BrU,GAC1EuM,EAAgBgI,uBAAuBN,UAGvC1D,GAAmB9O,KAAK8P,GAIhC,QAASoD,GAAgCtJ,EAAMoD,GAC3C9B,EAASuF,QAAQvB,EAAA,QAAOhB,0BAA2BtE,KAAMA,EAAMoD,MAAOA,IAG1E,QAASsE,GAAa3S,GAElB,GADAiM,EAAI,qBACAjM,EAAEqO,MAEF,WADApC,GAAIjM,EAAEqO,MAKV,IAAImG,GAAaxU,EAAEiL,IACnBsB,GAASuF,QAAQvB,EAAA,QAAOvB,aAAc/D,KAAMuJ,GAC5C,IAAIC,GAAcD,EAAYC,YAAeD,EAAWC,YAAc,kBAClEnG,EAAUkG,EAAWlG,QACrB6D,EAAeqC,EAAWrC,aAC1BiB,EAAWD,EAAY3I,GACvB6I,EAAkB7I,EAAUuH,aAC5B2C,EAAoB5I,EAAwB6I,iBAAiBnK,EAAW4I,EAAUqB,GAClFG,GAAczC,aAAcA,EAAcsC,YAAaA,EAG3D,KAAKC,EAGD,MAFAzI,GAAI,qEAAuEjM,EAAEiL,KAAKwJ,YAAc,oBAAsBtC,EAAa0C,oBACnIN,GAAgCK,EAKpC,IAAI9I,EAAwBgJ,WAAWtK,GAAY,CAC/C,GAAIuK,GAAYjJ,EAAwBkJ,8BAA8B5B,EAAU9E,EAChF,IAAIyG,EAIA,MAHA9I,GAAI,yDACJsI,EAAgCK,OAChCzI,GAAgB8I,iBAAiB9C,EAAc4C,GAMvD,GAAIG,GAAM,GAAIC,gBAGVC,EAAM,IACV,IAAIhC,GAAYA,EAASiC,UAAW,CAChC,GAAIA,GAAYjC,EAASiC,SACA,iBAAdA,IAAwC,KAAdA,EACjCD,EAAMC,EACsB,gBAAdA,IAA0BA,EAAUtQ,eAAe0P,KACjEW,EAAMC,EAAUZ,QAEbrB,IAAYA,EAASkC,OAA4B,KAAnBlC,EAASkC,MAE9CF,EAAMhC,EAASkC,OAEfF,EAAM5K,EAAU+K,gCAAgC9D,EAAA,QAAiB+D,YAAYrD,EAAa1H,cAEtF2K,EAAMpV,EAAEiL,KAAKqK,MAOrB,MAHAF,EAAMV,EAAkBe,wBAAwBL,EAAK9G,EAASmG,IAK1D,WADAF,GAAgCK,EAAW,wCAI/CM,GAAIQ,KAAKhB,EAAkBiB,cAAclB,GAAcW,GAAK,GAC5DF,EAAIU,aAAelB,EAAkBmB,gBAAgBxC,EAAiBoB,GACtES,EAAIY,OAAS,WACU,KAAfjW,KAAKkW,QACLxB,EAAgCK,GAChCzI,EAAgB8I,iBAAiB9C,EACzBuC,EAAkBsB,kBAAkBnW,KAAKoW,SAAU5C,EAAiBoB,KAE5EF,EAAgCK,EACxB,QAAUvB,EAAkB,2BAA6BxT,KAAKqW,WAAa,MAAQrW,KAAKkW,OACxF,wCAA0ClW,KAAKsW,WAC/C,mBAAqBtW,KAAMoW,SAAYvB,EAAkB0B,iBAAiBvW,KAAKoW,SAAU5C,EAAiBoB,GAAe,UAGzIS,EAAImB,QAAU,WACV9B,EAAgCK,EAAW,QAAUvB,EAAkB,oCAAsCxT,KAAKqW,WAAa,MAAQrW,KAAKkW,OAAS,oBAAsBlW,KAAKsW,aAEpLjB,EAAIoB,QAAU,WACV/B,EAAgCK,EAAW,QAAUvB,EAAkB,kCAAoCxT,KAAKqW,WAAa,MAAQrW,KAAKkW,OAAS,oBAAsBlW,KAAKsW,YAIlL,IAAMI,GAAgB,SAAUC,GAC5B,GAAIC,OAAG1S,EACP,IAAIyS,EACA,IAAKC,IAAOD,GACJ,kBAAoBC,EAAI3M,gBACxBoL,EAAIwB,iBAAkB,GAE1BxB,EAAIyB,iBAAiBF,EAAKD,EAAQC,IAI1CrD,IACAmD,EAAcnD,EAASwD,oBAE3BL,EAAc/L,EAAUqM,6BAA6BvI,IAGjD8E,GAAYA,EAASrO,eAAe,qBACpCmQ,EAAIwB,gBAAkBtD,EAASsD,iBAGnCxB,EAAI4B,KAAKtM,EAAUuM,6BAA6BzI,IAGpD,QAASoE,GAAUwB,GAGf,GAFAjI,EAAI,kBAE2B,SAA3BiI,EAAMuC,IAAIO,aAEV,WADA/K,GAAI,wEAA4EiI,EAAMuC,IAAIO,aAM9F,IAAIC,GAAa/C,EAAMuC,IAAIhM,QACvByM,aAAYC,OAAOF,KACnBA,EAAaA,EAAWjM,QAG5BiB,EAAI,iBAAkBzK,OAAOC,aAAayC,MAAM,KAAM,GAAI/B,YAAW8U,IAErE,IAAI9F,GAAcrF,EAAwBsL,uBAAuBH,EAAYhE,EAC7E,IAA2B,IAAvB9B,EAAYrQ,OAEZ,WADAmL,GAAI,0FAIRqF,GAAgBH,GAAa,GA3fjC,GAAIrF,GAA0BhE,EAAOgE,wBACjCK,EAAkBrE,EAAOqE,gBACzBG,EAAUxE,EAAOwE,QACjBC,EAAWzE,EAAOyE,SAClBN,EAAMnE,EAAOmE,IAEbnJ,MAAQiB,GACRkM,MAAUlM,GACVoM,MAAkBpM,GAClB+M,MAAS/M,GACTkN,MAASlN,GACTkP,MAAWlP,GACXqM,MAAWrM,GACXsM,MAAWtM,GACXuM,MAAevM,GACfyG,MAASzG,EA8fb,OAfAjB,IACIoJ,WAAYA,EACZqF,iBAAkBA,EAClBS,eAAgBA,EAChBE,iBAAkBA,EAClBE,gBAAiBA,EACjBC,qBAAsBA,EACtBE,gBAAiBA,EACjBM,eAAgBA,EAChBC,mBAAoBA,EACpBE,kBAAmBA,EACnBE,MAAOA,GAGXlD,IACOlN,2DAtiBW,cACO,cACV,cACS,eACO,eACV,cACF,cACJ,SAkiBnBiN,GAAqBjM,sBAAwB,iCAC9B2K,EAAA,QAAa7K,gBAAgBmM,mJC5hB5C,QAASsH,KASL,QAASrL,GAAUlE,GACVA,GAEDA,EAAOmE,MACPA,EAAMnE,EAAOmE,KAIrB,QAASC,KACL+D,IAEA,IAAIzF,OAASzG,EAGbyG,IAAY,EAAA8M,EAAA,SAAmB3U,GAAS6B,cACxCyL,EAAW5O,KAAKmJ,GAGhBA,GAAY,EAAA+M,EAAA,SAAkB5U,GAAS6B,cACvCyL,EAAW5O,KAAKmJ,GAGhBA,GAAY,EAAAgN,EAAA,SAAkB7U,GAAS6B,cACvCyL,EAAW5O,KAAKmJ,GAChBiN,EAAoBjN,EAaxB,QAAS0F,KACL,MAAOD,GAcX,QAASyH,GAA2B3F,GAChC,IAAK,GAAItR,GAAI,EAAGA,EAAIwP,EAAWnP,OAAQL,IACnC,GAAIwP,EAAWxP,GAAGsR,eAAiBA,EAC/B,MAAO9B,GAAWxP,EAG1B,OAAO,MAiBX,QAASqU,GAAWtK,GAChB,MAAQA,KAAciN,EAa1B,QAAS5F,GAAe8F,EAAWC,GAC/B,GAAID,EAAUlM,aAAemM,EAAUnM,WAAY,CAI/C,IAAK,GAHDoM,GAAQ,GAAI1V,YAAWwV,GACvBG,EAAQ,GAAI3V,YAAWyV,GAElBG,EAAI,EAAGA,EAAIF,EAAM/W,OAAQiX,IAC9B,GAAIF,EAAME,KAAOD,EAAMC,GACnB,OAAO,CAGf,QAAO,EAEX,OAAO,EAiBX,QAAS3G,GAA4C4G,GACjD,GAAIpO,OAAE7F,GAAEgQ,MAAEhQ,GAAE+P,MAAK/P,GAAEkU,MAAKlU,GACpBoN,IAEJ,IAAI6G,EACA,IAAKlE,EAAQ,EAAGA,EAAQ7D,EAAWnP,SAAUgT,EAEzC,IADAC,EAAK9D,EAAW6D,GACXmE,EAAQ,EAAGA,EAAQD,EAAIlX,SAAUmX,EAElC,GADArO,EAAKoO,EAAIC,GACLrO,EAAGC,YAAYC,gBAAkBiK,EAAGmE,YAAa,CAGjD,GAAIzN,GAAWsJ,EAAGoE,YAAYvO,EACxBa,IACF0G,EAAY9P,MACR0S,GAAI9D,EAAW6D,GACfrJ,SAAUA,IAOlC,MAAO0G,GAmBX,QAASiG,GAAuB3M,EAAUwI,GAItC,IAAK,GAHD9B,MACAnH,EAAOyH,EAAA,QAAiB9G,cAAcF,GAEjCqJ,EAAQ,EAAGA,EAAQ7D,EAAWnP,SAAUgT,EAAO,CACpD,GAAIT,GAAkBpD,EAAW6D,GAAO/B,aACpCqG,GAA8BnF,GAAgBI,IAAmBJ,EAEjEhD,GAAW6D,GAAOlJ,OAAQZ,IAAQoO,GAClCjH,EAAY9P,MACR0S,GAAI9D,EAAW6D,GACfrJ,SAAUT,EAAKiG,EAAW6D,GAAOlJ,QAI7C,MAAOuG,GAoBX,QAASwD,GAAiBnK,EAAW4I,EAAUqB,GAI3C,GAAoB,oBAAhBA,GAAqD,8BAAhBA,EACrC,MAAO,KAGX,IAAIC,GAAoB,IAWxB,OAVItB,IAAYA,EAASrO,eAAe,YACpC2P,GAAoB,EAAA2D,EAAA,SAAS1V,GAAS6B,cACJ,uBAA3BgG,EAAUuH,aACjB2C,GAAoB,EAAA4D,EAAA,SAAS3V,GAAS6B,cACJ,4BAA3BgG,EAAUuH,aACjB2C,GAAoB,EAAA6D,EAAA,SAAU5V,GAAS6B,cACL,oBAA3BgG,EAAUuH,eACjB2C,GAAoB,EAAA8D,EAAA,SAAS7V,GAAS6B,eAGnCkQ,EAcX,QAASM,GAA8B5B,EAAU9E,GAC7C,IACI,MAAOmJ,GAAkBgB,+BAA+BrF,EAAU9E,GACpE,MAAOD,GAEL,MADApC,GAAI,oDACG,MAhPf,GAAItJ,GAAU9C,KAAK8C,QAGfsJ,MAAGlI,GACHkM,MAAUlM,GACV0T,MAAiB1T,EA4PrB,QAZImI,WAAYA,EACZ4I,WAAYA,EACZjD,eAAgBA,EAChB3B,cAAeA,EACfwH,2BAA4BA,EAC5BtG,4CAA6CA,EAC7CgG,uBAAwBA,EACxBzC,iBAAkBA,EAClBK,8BAA+BA,EAC/BhJ,UAAWA,4DA9QU,cACC,eACA,eACC,eACV,eACC,eACD,eACA,eACI,SA4QzBqL,GAAwBvT,sBAAwB,oCACjC2K,EAAA,QAAalK,oBAAoB8S,iKC3QhD,QAASqB,KAaL,QAASD,GAA+BE,EAAgBrK,GACpD,GAAIsK,GAAc,IAClB,IAAID,EAAgB,CAKhB,IAAK,GAFDE,GAAUC,KAAKC,MAAMvX,OAAOC,aAAayC,MAAM,KAAM,GAAI/B,YAAWmM,KACpE0K,KACKvY,EAAI,EAAGA,EAAIoY,EAAQI,KAAKnY,OAAQL,IAAK,CAC1C,GAAIyY,GAAaL,EAAQI,KAAKxY,GAC1B0Y,EAAWR,EAAgB5D,UAAUhQ,eAAemU,GAAeP,EAAe5D,UAAUmE,GAAc,IAC9G,KAAKC,EACD,KAAM,IAAIzY,OAAM,wBAA0BwY,EAAa,kBAG3DF,GAAS3X,KAAK,GAAA+X,GAAA,QAAYF,EAAYC,IAE1CP,EAAc,GAAAS,GAAA,QAAmBL,GAErC,MAAOJ,GAGX,QAAST,GAAYvO,GACjB,MAAO6H,GAAA,QAAiB6H,mCAAmC1P,GAG/D,QAASiN,KACL,MAAO,MAGX,QAASE,GAA6BzI,GAClC,MAAO,IAAInM,YAAWmM,GAG1B,QAASiH,KACL,MAAO,MAcX,OAVI3K,KAAMA,EACNsN,YAAaA,EACbnG,aAAcA,EACdoG,YAAaA,EACbtB,6BAA8BA,EAC9BE,6BAA8BA,EAC9BxB,gCAAiCA,EACjCkD,+BAAgCA,4DAnEpB,eACO,eACE,cACJ,UAEnB7N,EAAO,uCACPmH,EAAe,kBACfmG,EAAc,YAActN,CAkElC8N,GAAkB5U,sBAAwB,8BAC3B2K,EAAA,QAAalK,oBAAoBmU,mIC3DhD,QAASa,KAKL,QAAS1C,GAA6BvI,GAClC,GAAIkL,OAAGzV,GACH0V,MAAM1V,GACNyS,KACAkD,EAAS,GAAIC,WACbC,EAA8B,UAAnBC,EAA8B,GAAIC,aAAYxL,GAAW,GAAInM,YAAWmM,EAEvFkL,GAAMhY,OAAOC,aAAayC,MAAM,KAAM0V,GACtCH,EAASC,EAAOK,gBAAgBP,EAAK,kBAIrC,KAAK,GAFDQ,GAAiBP,EAAOQ,qBAAqB,QAC7CC,EAAkBT,EAAOQ,qBAAqB,SACzCxZ,EAAI,EAAGA,EAAIuZ,EAAelZ,OAAQL,IACvC+V,EAAQwD,EAAevZ,GAAG0Z,WAAW,GAAGC,WAAaF,EAAgBzZ,GAAG0Z,WAAW,GAAGC,SAS1F,OAJI5D,GAAQzR,eAAe,aACvByR,EAAQ,gBAAkBA,EAAQ6D,cAC3B7D,GAAQ6D,SAEZ7D,EAGX,QAASO,GAA6BzI,GAClC,GAAIkL,OAAGzV,GACH0V,MAAM1V,GACNuW,EAAiB,KACjBZ,EAAS,GAAIC,WACbC,EAA8B,UAAnBC,EAA8B,GAAIC,aAAYxL,GAAW,GAAInM,YAAWmM,EAKvF,IAHAkL,EAAMhY,OAAOC,aAAayC,MAAM,KAAM0V,GACtCH,EAASC,EAAOK,gBAAgBP,EAAK,mBAEjCC,EAAOQ,qBAAqB,aAAa,GAAI,CAC7C,GAAIM,GAAYd,EAAOQ,qBAAqB,aAAa,GAAGE,WAAW,GAAGC,SACtEG,KACAD,EAAiBxP,EAAA,QAAOxJ,OAAOiZ,IAGvC,MAAOD,GAGX,QAAS/E,GAAgC9K,GACrC,GAAIA,EAMA,IAAK,GALDQ,GAAO,GAAId,UAASM,GACpB+P,EAAavP,EAAKwP,UAAU,GAAG,GAC/BxQ,EAAS,EACTyP,EAAS,GAAIC,WAERlZ,EAAI,EAAGA,EAAI+Z,EAAY/Z,IAAK,CAEjC,GAAIia,GAAazP,EAAKwP,UAAUxQ,GAAQ,EACxCA,IAAU,CACV,IAAI0Q,GAAe1P,EAAKwP,UAAUxQ,GAAQ,EAE1C,IADAA,GAAU,EACS,IAAfyQ,EAAJ,CAKA,GAAIE,GAAanQ,EAASF,MAAMN,EAAQA,EAAS0Q,GAC7CE,EAASrZ,OAAOC,aAAayC,MAAM,KAAM,GAAI4V,aAAYc,IACzDnB,EAASC,EAAOK,gBAAgBc,EAAQ,kBAG5C,IAAIpB,EAAOQ,qBAAqB,UAAU,GAAI,CAC1C,GAAIa,GAAQrB,EAAOQ,qBAAqB,UAAU,GAAGE,WAAW,GAAGC,SACnE,IAAIU,EACA,MAAOA,GAKf,GAAIrB,EAAOQ,qBAAqB,WAAW,GAAI,CAC3C,GAAIc,GAAStB,EAAOQ,qBAAqB,WAAW,GAAGE,WAAW,GAAGC,SACrE,IAAIW,EACA,MAAOA,QApBX9Q,IAAU0Q,EA0BtB,MAAO,MAGX,QAASxC,GAAYtN,GASjB,GAAImQ,GAAc,GAAI7Y,aAAY,IAAM,IAAM,IAAM,IAAM,EAAM,EAAM,EAAM,IACxE8Y,EAAoB,GAAI9Y,aAAY,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAE9HiJ,EAAa,EACb8P,EAA6B,KAE7BC,MAAOpX,GACPqX,MAAQrX,GACRsX,MAAatX,GACbuX,MAAOvX,GACPwX,MAAQxX,EAGZ,IAAI,QAAU8G,GACV,MAAO4G,GAAA,QAAiB6H,mCAAmCzO,EAG/D,IAAI,OAASA,GACTqQ,EAA6BpQ,EAAA,QAAO9I,YAAY6I,EAAO2Q,IAAIzQ,YAE1D,CAAA,KAAI,YAAcF,IAInB,MAAO,KAHPqQ,GAA6BpQ,EAAA,QAAO9I,YAAY6I,EAAO4Q,SAAS1Q,QA6BpE,MAvBAoQ,GAAUD,EAA2Bpa,OACrCsa,EAAW,EAAMJ,EAAYla,OAASma,EAAkBna,OAAS,EAAMqa,EAEvEE,EAAgB,GAAInE,aAAYkE,GAEhCE,EAAU,GAAInZ,YAAWkZ,GACzBE,EAAW,GAAIpR,UAASkR,GAExBE,EAASG,UAAUtQ,EAAYgQ,GAC/BhQ,GAAc,EAEdkQ,EAAQK,IAAIX,EAAa5P,GACzBA,GAAc4P,EAAYla,OAE1Bwa,EAAQK,IAAIV,EAAmB7P,GAC/BA,GAAc6P,EAAkBna,OAEhCya,EAASG,UAAUtQ,EAAY+P,GAC/B/P,GAAc,EAEdkQ,EAAQK,IAAIT,EAA4B9P,GACxCA,GAAc+P,EAEPG,EAAQtQ,OAWnB,QAAS4Q,GAA0BC,GAC/B,GAAe,SAAXA,GAAgC,UAAXA,EACrB,KAAM,IAAInb,OAAM,wCAA0Cmb,EAE9DhC,GAAgBgC,EApKpB,GACIhC,GAAgB,OAiLpB,QAVIjP,KAAMA,EACNsN,YAAaA,EACbnG,aAAcA,EACdoG,YAAaA,EACbtB,6BAA8BA,EAC9BE,6BAA8BA,EAC9BxB,gCAAiCA,EACjCqG,0BAA2BA,4DA1LN,cAEJ,cACN,UAEbhR,EAAO,uCACPmH,EAAe,0BACfmG,EAAc,YAActN,CAyLlC2O,GAAmBzV,sBAAwB,+BAC5B2K,EAAA,QAAalK,oBAAoBgV,2HCzLhD,QAASuC,KAIL,QAAS3D,GAAYvO,GACjB,MAAO6H,GAAA,QAAiB6H,mCAAmC1P,GAG/D,QAASiN,KACL,MAAO,MAGX,QAASE,GAA6BzI,GAClC,MAAO,IAAInM,YAAWmM,GAG1B,QAASiH,KACL,MAAO,MAaX,OATI3K,KAAMA,EACNsN,YAAaA,EACbnG,aAAcA,EACdoG,YAAaA,EACbtB,6BAA8BA,EAC9BE,6BAA8BA,EAC9BxB,gCAAiCA,4DAlCZ,cACJ,UAEnB3K,EAAO,uCACPmH,EAAe,qBACfmG,EAAc,YAActN,CAmClCkR,GAAkBhY,sBAAwB,8BAC3B2K,EAAA,QAAalK,oBAAoBuX,uHC/BhD,QAASC,GAAoBjU,GAoCzB,QAASkI,KACLrD,EAAe,KACfnC,EAAY,KACZwR,KACAC,KACAnQ,GAA0B,EAAAC,EAAA,SAAwBpJ,GAAS6B,cAC3D0X,EAAeC,IAGnB,QAASjJ,KACDvG,GACAyP,GAEJ,KAAK,GAAI3b,GAAI,EAAGA,EAAIwb,EAASnb,OAAQL,IACjC2R,EAAgB6J,EAASxb,GAE7B8L,GAASuF,QAAQvB,EAAA,QAAOX,mBAG5B,QAAS0E,KACL,MAAO9J,GAGX,QAASoH,KAEL,IAAK,GADDjI,MACKlJ,EAAI,EAAGA,EAAIub,EAAgBlb,OAAQL,IACxCkJ,EAAOtI,KAAK2a,EAAgBvb,GAAGgK,SAEnC,KAAK,GAAIhK,GAAI,EAAGA,EAAIwb,EAASnb,OAAQL,IACjCkJ,EAAOtI,KAAK4a,EAASxb,GAAGgK,SAE5B,OAAOd,GAGX,QAASwK,GAAuBkI,GAC5B,GAAIC,GAAK3P,CACJ2P,KACDA,EAAKC,SAASC,cAAc,SAMhC,KAAK,GADDC,IAAQ,EACH3I,EAAQ,EAAGA,EAAQuI,EAAiBvb,OAAQgT,IAQjD,IAAK,GAPD/B,GAAesK,EAAiBvI,GAAOC,GAAGhC,aAC1CiC,EAAUqI,EAAiBvI,GAAOE,QAClC0I,EAAiB,KACjBC,EAAiB,KAIZC,EAAY,EAAGA,EAAY5I,EAAQlT,OAAQ8b,IAAa,CAE7D,GAAIC,GAAS7I,EAAQ4I,GAAWpJ,iBAEhC,IAAIqJ,GAA4B,IAAlBA,EAAO/b,OAAc,CAC/B6b,IACA,KAAK,GAAIG,GAAW,EAAGA,EAAWD,EAAO/b,OAAQgc,IACsB,KAA/DR,EAAGS,YAAYF,EAAOC,GAAUE,YAAajL,IAC7C4K,EAAetb,KAAKwb,EAAOC,IAOvC,MAAMJ,IAAmBC,GACpBD,GAA4C,IAA1BA,EAAe5b,QACjC6b,GAA4C,IAA1BA,EAAe7b,QAFtC,CAOA2b,GAAQ,CACR,IAAI9I,GAAW,GAAAC,GAAA,QAA2B8I,EAAgBC,GACtD5I,EAAKjI,EAAwB4L,2BAA2B3F,EAC5DxF,GAASuF,QAAQvB,EAAA,QAAOlB,4BAA8BpE,KAAM,GAAAgS,GAAA,QAAoBlJ,EAAIJ,IACpF,QAGH8I,GACDlQ,EAASuF,QAAQvB,EAAA,QAAOlB,4BAA6BhB,MAAO,uFAIpE,QAASiD,GAAgB+C,GACrB7J,EAAY6J,EAAgB7J,UAC5B+B,EAASuF,QAAQvB,EAAA,QAAO1B,8BAG5B,QAAS0D,GAAgB2K,GACjBvQ,IAAiBuQ,IAKjBvQ,GACAyP,KAGJzP,EAAeuQ,KAIXvQ,EAAawQ,iBAAiB7P,EAAIS,SAAUmO,GAC5CvP,EAAawQ,iBAAiB7P,EAAIQ,QAASoO,GAC3CvP,EAAawQ,iBAAiB7P,EAAIW,WAAYiO,GAC9CvP,EAAawQ,iBAAiB7P,EAAIU,SAAUkO,GAC5C3P,EAASuF,QAAQvB,EAAA,QAAOV,0BAIhC,QAAS0B,GAAiB9G,GAEtB,IAAKD,EACD,KAAM,IAAI9J,OAAM,+DAIpB,IAAI0c,GAA2C,IAApBnB,EAASnb,OAAc,CAE9C,GAAIuc,IACApL,UAAW,KACXxH,SAAUA,EACVoK,aAAc,WACV,MAAOhV,MAAKoS,WAGhBqL,kBAAmB,WACf,MAAOC,MAGXC,eAAgB,WACZ,MAAO,aAQf,OALAxB,GAAgB3a,KAAKgc,GAGrB1Q,EAAaW,EAAIK,oBAAoBnD,EAAUuH,aAAc,GAAI5P,YAAWsI,IAErE4S,EAGP,KAAM,IAAI3c,OAAM,kCAKxB,QAASuU,GAAiB9C,EAAc7D,GACpC,GAAI2D,GAAYE,EAAaF,SAC7B,IAAKnG,EAAwBgJ,WAAWtK,GAMpC,IAAK,GAAI/J,GAAI,EAAGA,EAAI6N,EAAQ0K,SAASlY,OAAQL,IACzCkM,EAAaW,EAAIM,QAAQpD,EAAUuH,aAC/BzD,EAAQ0K,SAASvY,GAAGgW,IAAKnI,EAAQ0K,SAASvY,GAAGgd,MAAOxL,OAN5DtF,GAAaW,EAAIM,QAAQpD,EAAUuH,aAC/B,GAAI5P,YAAWmM,GAAU6D,EAAa1H,SAAUwH,GAU5D,QAASG,GAAgBD,GAErBxF,EAAaW,EAAIO,kBAAkBrD,EAAUuH,aAAcI,EAAaF;kDAG5E,QAASI,MACT,QAASL,MACT,QAASE,MAET,QAASiK,KACL,OACIuB,YAAa,SAAUxJ,GACnB,GAAI/B,GAAe,IACnB,QAAQ+B,EAAMyJ,MAEV,IAAKrQ,GAAIQ,QACL,GAAIrD,GAAWyM,YAAYC,OAAOjD,EAAMzJ,UAAYyJ,EAAMzJ,SAASO,OAASkJ,EAAMzJ,QAClF8B,GAASuF,QAAQvB,EAAA,QAAOf,UAAWiH,IAAK,GAAAmH,GAAA,QAAYnT,EAAU,SAC9D,MAAM,KAEL6C,GAAIS,SAML,GALAoE,EAAe0L,EAAgB5B,EAAU/H,EAAM4J,WAC1C3L,IACDA,EAAe0L,EAAgB7B,EAAiB9H,EAAM4J,YAGtD3L,EAAc,CACd,GAAIqH,GAAM,EACV,QAAQtF,EAAM6J,UAAUpd,MACpB,IAAK,GACD6Y,GAAO,8HACP,MAAM,KACL,GACDA,GAAO,yEACP,MAAM,KACL,GACDA,GAAO,oGACP,MAAM,KACL,GACDA,GAAO,gIACP,MAAM,KACL,GACDA,GAAO,kGACP,MAAM,KACL,GACDA,GAAO,mJAGfA,GAAO,mBAAqBtF,EAAM8J,WAElCzR,EAASuF,QAAQvB,EAAA,QAAOxB,WAAY9D,KAAM,GAAAgT,GAAA,QAAa9L,EAAcqH,SAErEvN,GAAI,uCAER,MAAM,KAELqB,GAAIU,SACLmE,EAAe0L,EAAgB5B,EAAU/H,EAAM4J,WAC1C3L,IACDA,EAAe0L,EAAgB7B,EAAiB9H,EAAM4J,YAGtD3L,GACAlG,EAAI,mBACJM,EAASuF,QAAQvB,EAAA,QAAOzB,WAAY7D,KAAMkH,KAE1ClG,EAAI,uCAER,MAAM,KAELqB,GAAIW,WA6BL,GAzBAmP,EAA2C,OAArBlJ,EAAO4J,eAA4C/Z,KAApBmQ,EAAM4J,UAGvDV,IAGAjL,EAAe0L,EAAgB5B,EAAU/H,EAAM4J,aAC1B9B,EAAgBlb,OAAS,IAI1CqR,EAAe6J,EAAgBkC,QAC/BjC,EAAS5a,KAAK8Q,GACdA,EAAaF,UAAYiC,EAAM4J,WAE5B9B,EAAgBlb,OAAS,IAEhCqR,EAAe6J,EAAgBkC,QAC/BjC,EAAS5a,KAAK8Q,GAEiB,IAA3B6J,EAAgBlb,QAChB4L,EAAWyR,qBAAqB,0HAIpChM,EAAc,CACd,GAAI7D,GAAU4I,YAAYC,OAAOjD,EAAM5F,SAAW4F,EAAM5F,QAAQtD,OAASkJ,EAAM5F,OAK/E6D,GAAaqC,WAAalG,EAC1B/B,EAASuF,QAAQvB,EAAA,QAAO3B,sBAAuB3D,KAAM,GAAAmT,GAAA,QAAejM,EAAc7D,EAAS4F,EAAMmK,kBAGjGpS,GAAI,6CAiB5B,QAAS4R,GAAgBS,EAAcrM,GAEnC,GAAKA,GAAcqM,EAEZ,CAEH,IAAK,GADCC,GAAMD,EAAaxd,OAChBL,EAAI,EAAGA,EAAI8d,EAAK9d,IACrB,GAAI6d,EAAa7d,GAAGwR,WAAaA,EAC7B,MAAOqM,GAAa7d,EAG5B,OAAO,MARP,MAAO,MAYf,QAAS2b,KACLzP,EAAa6R,oBAAoBlR,EAAIS,SAAUmO,GAC/CvP,EAAa6R,oBAAoBlR,EAAIQ,QAASoO,GAC9CvP,EAAa6R,oBAAoBlR,EAAIW,WAAYiO,GACjDvP,EAAa6R,oBAAoBlR,EAAIU,SAAUkO,GAvVnD,GAAIvZ,GAAU9C,KAAK8C,QACf4J,EAAWzE,EAAOyE,SAClBN,EAAMnE,EAAOmE,IACbqB,EAAMxF,EAAOwF,IACbZ,EAAa5E,EAAO4E,WAEpB5J,MAAQiB,GACR4I,MAAY5I,GACZyG,MAASzG,GACT+H,MAAuB/H,GAQvBiY,MAAejY,GAIfkY,MAAQlY,GAMRqZ,MAAmBrZ,GAKnBmY,MAAYnY,EA2UhB,OAjBAjB,IACI8O,eAAgBA,EAChBuC,uBAAwBA,EACxBG,aAAcA,EACdhD,gBAAiBA,EACjBiB,gBAAiBA,EACjBhB,iBAAkBA,EAClB0D,iBAAkBA,EAClB7C,gBAAiBA,EACjBC,qBAAsBA,EACtBL,eAAgBA,EAChBE,iBAAkBA,EAClBgB,MAAOA,GAGXlD,IAEOlN,2DAtXyB,eAChB,eACC,eACE,eACY,eACP,eACT,cACM,SAkXzBiZ,GAAoBjY,sBAAwB,gCAC7B2K,EAAA,QAAa7K,gBAAgBmY,2JClX5C,QAAS0C,GAA0B3W,GAc/B,QAASkI,KACLxF,EAAY,KACZmC,EAAe,KACfI,EAAY,KACZkP,KACAnQ,GAA0B,EAAAC,EAAA,SAAwBpJ,GAAS6B,cAC3D0X,EAAeC,IAGnB,QAASjJ,KACL,GAAMwL,GAAczC,EAASnb,OACzB6d,MAAO5a,EAES,KAAhB2a,aAeA,IAAK,GAbCvT,GAAO,SAAUwT,GACnBC,EAAcD,GACU,IAApB1C,EAASnb,SACL6L,GACAA,EAAa6R,oBAAoB,YAAatC,GAC9CvP,EAAauB,aAAa,MAAM2Q,KAAK,WACjCtS,EAASuF,QAAQvB,EAAA,QAAOX,sBAG5BrD,EAASuF,QAAQvB,EAAA,QAAOX,qBAI3BnP,EAAI,EAAGA,EAAIie,EAAaje,IAC7Bke,EAAU1C,EAASxb,GACnB,SAAWL,GAEPue,EAAQA,QAAQG,OAAOD,KAAK,WACxB1T,EAAK/K,KAIT2e,EAAwBJ,GAAQ,MAAO,WACnCxT,EAAK/K,MAGVue,MAGPpS,EAASuF,QAAQvB,EAAA,QAAOX,mBAIhC,QAAS0E,KACL,MAAO9J,GAGX,QAASoH,KAEL,IAAK,GADDjI,MACKlJ,EAAI,EAAGA,EAAIwb,EAASnb,OAAQL,IACjCkJ,EAAOtI,KAAK4a,EAASxb,GAAGgK,SAE5B,OAAOd,GAGX,QAASwK,GAAuBkI,GAC5B2C,EAA+B3C,EAAkB,GAGrD,QAAS/K,GAAgB+C,GACrBA,EAAgB4K,KAAKC,kBAAkBL,KAAK,SAAUM,GAClD3U,EAAY6J,EAAgB7J,UAC5BuC,EAAYoS,EACRxS,GACAA,EAAauB,aAAanB,GAAW8R,KAAK,WACtCtS,EAASuF,QAAQvB,EAAA,QAAO1B,kCAIlC,MAAO,WACLtC,EAASuF,QAAQvB,EAAA,QAAO1B,8BAA+BR,MAAO,gCAAkCgG,EAAgB7J,UAAUuH,aAAe,4CAIjJ,QAASQ,GAAgB2K,GACjBvQ,IAAiBuQ,IAIjBvQ,IACAA,EAAa6R,oBAAoB,YAAatC,GAC9CvP,EAAauB,aAAa,QAG9BvB,EAAeuQ,KAIXvQ,EAAawQ,iBAAiB,YAAajB,GACvCnP,GACAJ,EAAauB,aAAanB,KAKtC,QAASsF,GAAqBC,GAC1B,IAAK9H,IAAcuC,EACf,KAAM,IAAIrM,OAAM,sEAEpBqM,GAAUsF,qBAAqBC,GAAmBuM,KAAK,WACnD5S,EAAI,yDACJM,EAASuF,QAAQvB,EAAA,QAAOZ,8BAC1B,MAAO,SAAUtB,GACf9B,EAASuF,QAAQvB,EAAA,QAAOZ,4BAA6BtB,MAAO,wCAA0CA,EAAM7L,SAIpH,QAAS+O,GAAiB9G,EAAU4F,GAEhC,IAAK7F,IAAcuC,EACf,KAAM,IAAIrM,OAAM,+DAGpB,IAAIie,GAAU5R,EAAUqS,cAAc/O,GAClC8B,EAAekN,EAAmBV,EAASlU,EAAU4F,EAGzDsO,GAAQW,gBAAgB,OAAQ7U,GAAUoU,KAAK,WAC3C5S,EAAI,sCAAwCkG,EAAa0C,gBACzDtI,EAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAMkH,MACtD,MAAO,SAAU9D,GAEfuQ,EAAczM,GACd5F,EAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAM,KAAMoD,MAAO,mCAAqCA,EAAM7L,SAIpH,QAASyS,GAAiB9C,EAAc7D,GAEpC,GAAIqQ,GAAUxM,EAAawM,OAGvB7S,GAAwBgJ,WAAWtK,KACnC8D,EAAUA,EAAQiR,SAEtBZ,EAAQa,OAAOlR,GAAQ,MAAO,SAAUD,GACpC9B,EAASuF,QAAQvB,EAAA,QAAOxB,WAAY9D,KAAM,GAAAgT,GAAA,QAAa9L,EAAc,mCAAqC9D,EAAM7L,UAIxH,QAASwP,GAAeC,GACpB,IAAKzH,IAAcuC,EACf,KAAM,IAAIrM,OAAM,6DAGpB,IAAIie,GAAU5R,EAAUqS,eAGxBT,GAAQc,KAAKxN,GAAW4M,KAAK,SAAUa,GACnC,GAAIA,EAAS,CACT,GAAIvN,GAAekN,EAAmBV,EACtC1S,GAAI,sCAAwCkG,EAAa0C,gBACzDtI,EAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAMkH,QAEpD5F,GAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAM,KAAMoD,MAAO,+CAAiD4D,EAAY,QAEpI,MAAO,SAAU5D,GACf9B,EAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAM,KAAMoD,MAAO,2BAA6B4D,EAAY,MAAQ5D,EAAM7L,SAIhI,QAAS0P,GAAiBC,GACRA,EAAawM,QAEnBgB,SAASd,KAAK,WAClB5S,EAAI,sCAAwCkG,EAAa0C,gBACzDtI,EAASuF,QAAQvB,EAAA,QAAOpB,qBAAsBlE,KAAMkH,EAAa0C,kBAClE,SAAUxG,GACT9B,EAASuF,QAAQvB,EAAA,QAAOpB,qBAAsBlE,KAAM,KAAMoD,MAAO,2BAA6B8D,EAAa0C,eAAiB,MAAQxG,EAAM7L,SAKlJ,QAAS4P,GAAgBD,GAErB4M,EAAwB5M,GAAa,MAAO,SAAU9D,GAClDuQ,EAAczM,GACd5F,EAASuF,QAAQvB,EAAA,QAAOtB,oBAAqBhE,KAAM,KAAMoD,MAAO,0BAA4B8D,EAAa0C,eAAiB,KAAOxG,EAAM7L,SAI/I,QAASwc,GAA+B3C,EAAkBuD,IACtD,SAAWnf,GACP,GAAI+J,GAAY6R,EAAiB5b,GAAGsT,GAChCC,EAAUqI,EAAiB5b,GAAGuT,OAClChH,WAAUC,4BAA4BzC,EAAUuH,aAAciC,GAAS6K,KAAK,SAAUgB,GAGlF,GAAIC,GAAkE,kBAA1CD,GAAqBE,iBACzCF,EAAqBE,mBAAqB,KAC9C1L,EAAkB,GAAA4I,GAAA,QAAoBzS,EAAWsV,EACrDzL,GAAgB4K,KAAOY,EACvBtT,EAASuF,QAAQvB,EAAA,QAAOlB,4BAA6BpE,KAAMoJ,MAE7D,MAAO,aACC5T,EAAI4b,EAAiBvb,OACvBke,EAA+B3C,EAAkB5b,GAEjD8L,EAASuF,QAAQvB,EAAA,QAAOlB,4BAA6BhB,MAAO,iCAGrEuR,GAGP,QAASb,GAAwB5M,GAC7B,GAAIwM,GAAUxM,EAAawM,OAO3B,OAJAA,GAAQH,oBAAoB,oBAAqBrM,GACjDwM,EAAQH,oBAAoB,UAAWrM,GAGhCwM,EAAQnQ,QAMnB,QAAS2N,KACL,OACIuB,YAAa,SAAUxJ,GACnB,OAAQA,EAAMyJ,MAEV,IAAK,YACD,GAAIzJ,EAAMzJ,SAAU,CAChB,GAAIA,GAAWyM,YAAYC,OAAOjD,EAAMzJ,UAAYyJ,EAAMzJ,SAASO,OAASkJ,EAAMzJ,QAClF8B,GAASuF,QAAQvB,EAAA,QAAOf,UAAWiH,IAAK,GAAAmH,GAAA,QAAYnT,EAAUyJ,EAAM8C,oBAQ5F,QAAS4H,GAAcoB,GAEnB,IAAK,GAAIvf,GAAI,EAAGA,EAAIwb,EAASnb,OAAQL,IACjC,GAAIwb,EAASxb,KAAOuf,EAAO,CACvB/D,EAASgE,OAAOxf,EAAE,EAClB,QAOZ,QAAS4e,GAAmBV,EAASlU,EAAU4F,GAE3C,GAAI2P,IACArB,QAASA,EACTlU,SAAUA,EAKViT,YAAa,SAAUxJ,GACnB,OAAQA,EAAMyJ,MACV,IAAK,oBACDpR,EAASuF,QAAQvB,EAAA,QAAOnB,sBAAuBnE,KAAMpL,MACrD,MAAM,KAEL,UACD,GAAIyO,GAAU4I,YAAYC,OAAOjD,EAAM5F,SAAW4F,EAAM5F,QAAQtD,OAASkJ,EAAM5F,OAC/E/B,GAASuF,QAAQvB,EAAA,QAAO3B,sBAAuB3D,KAAM,GAAAmT,GAAA,QAAeve,KAAMyO,MAASvK,GAAWmQ,EAAMO,iBAKhHI,aAAc,WACV,MAAO8J,GAAQb,WAGnBR,kBAAmB,WACf,MAAOqB,GAAQuB,YAGnBC,eAAgB,WACZ,MAAOxB,GAAQyB,aAGnB5C,eAAgB,WACZ,MAAOnN,IAkBf,OAbAsO,GAAQxB,iBAAiB,oBAAqB6C,GAC9CrB,EAAQxB,iBAAiB,UAAW6C,GAGpCrB,EAAQG,OAAOD,KAAK,WAChBD,EAAcoB,GACd/T,EAAI,qCAAuC+T,EAAMnL,gBACjDtI,EAASuF,QAAQvB,EAAA,QAAOtB,oBAAqBhE,KAAM+U,EAAMnL,mBAI7DoH,EAAS5a,KAAK2e,GAEPA,EA5TX,GAAIrd,GAAU9C,KAAK8C,QACf4J,EAAWzE,EAAOyE,SAClBN,EAAMnE,EAAOmE,IAEbnJ,MAAQiB,GACRyG,MAASzG,GACT4I,MAAY5I,GACZgJ,MAAShJ,GACTkY,MAAQlY,GACRmY,MAAYnY,GACZ+H,MAAuB/H,EAsU3B,OAjBAjB,IACI8O,eAAgBA,EAChBuC,uBAAwBA,EACxBG,aAAcA,EACdhD,gBAAiBA,EACjBiB,gBAAiBA,EACjBF,qBAAsBA,EACtBd,iBAAkBA,EAClB0D,iBAAkBA,EAClBjD,eAAgBA,EAChBE,iBAAkBA,EAClBE,gBAAiBA,EACjBc,MAAOA,GAGXlD,IAEOlN,2DA1VyB,eAChB,eACC,eACE,eACK,eACT,cACM,SAuVzB2b,GAA0B3a,sBAAwB,sCACnC2K,EAAA,QAAa7K,gBAAgB6a,qJCpV5C,QAAS4B,GAAyBvY,GAiB9B,QAASkI,KACLrD,EAAe,KACfnC,EAAY,KACZuC,EAAY,KACZsH,EAAkB,KAClB4H,KACAnQ,GAA0B,EAAAC,EAAA,SAAwBpJ,GAAS6B,cAC3D0X,EAAeC,IAGnB,QAASjJ,KACL,IACI,IAAK,GAAIzS,GAAI,EAAGA,EAAIwb,EAASnb,OAAQL,IACjC2R,EAAgB6J,EAASxb,GAEzBkM,IACAA,EAAa6R,oBAAoBlR,EAAIQ,QAASoO,GAElD3P,EAASuF,QAAQvB,EAAA,QAAOX,mBAC1B,MAAOvB,GACL9B,EAASuF,QAAQvB,EAAA,QAAOX,mBAAoBvB,MAAO,qDAAuDA,EAAMC,WAIxH,QAASgG,KACL,MAAO9J,GAGX,QAASoH,KAEL,IAAK,GADDjI,MACKlJ,EAAI,EAAGA,EAAIwb,EAASnb,OAAQL,IACjCkJ,EAAOtI,KAAK4a,EAASxb,GAAGgK,SAE5B,OAAOd,GAGX,QAASwK,GAAuBkI,GAK5B,IAAK,GADDI,IAAQ,EACH3I,EAAQ,EAAGA,EAAQuI,EAAiBvb,OAAQgT,IAQjD,IAAK,GAPD/B,GAAesK,EAAiBvI,GAAOC,GAAGhC,aAC1CiC,EAAUqI,EAAiBvI,GAAOE,QAClC0I,EAAiB,KACjBC,EAAiB,KAIZC,EAAY,EAAGA,EAAY5I,EAAQlT,OAAQ8b,IAAa,CAC7D,GAAI0D,GAAStM,EAAQ4I,GAAWrJ,kBAC5BsJ,EAAS7I,EAAQ4I,GAAWpJ,iBAGhC,IAAI8M,GAA4B,IAAlBA,EAAOxf,OAAc,CAC/B4b,IACA,KAAK,GAAI6D,GAAW,EAAGA,EAAWD,EAAOxf,OAAQyf,IACzC7gB,OAAO4N,EAAIa,WAAWqS,gBAAgBzO,EAAcuO,EAAOC,GAAUvD,cACrEN,EAAerb,KAAKif,EAAOC,IAMvC,GAAI1D,GAA4B,IAAlBA,EAAO/b,OAAc,CAC/B6b,IACA,KAAK,GAAIG,GAAW,EAAGA,EAAWD,EAAO/b,OAAQgc,IACzCpd,OAAO4N,EAAIa,WAAWqS,gBAAgBzO,EAAc8K,EAAOC,GAAUE,cACrEL,EAAetb,KAAKwb,EAAOC,IAOvC,MAAMJ,IAAmBC,GACpBD,GAA4C,IAA1BA,EAAe5b,QACjC6b,GAA4C,IAA1BA,EAAe7b,QAFtC,CAOA2b,GAAQ,CACR,IAAI9I,GAAW,GAAAC,GAAA,QAA2B8I,EAAgBC,GACtD5I,EAAKjI,EAAwB4L,2BAA2B3F,EAC5DxF,GAASuF,QAAQvB,EAAA,QAAOlB,4BAA6BpE,KAAM,GAAAgS,GAAA,QAAoBlJ,EAAIJ,IACnF,QAGH8I,GACDlQ,EAASuF,QAAQvB,EAAA,QAAOlB,4BAA6BhB,MAAO,uFAIpE,QAASiD,GAAgBmP,GACrB,IACI1T,EAAY0T,EAAS1T,UAAY,GAAIrN,QAAO4N,EAAIa,WAAWsS,EAASjW,UAAUuH,cAC9EvH,EAAYiW,EAASjW,UACrB6J,EAAkBoM,EACd9T,GACAuB,IAEJ3B,EAASuF,QAAQvB,EAAA,QAAO1B,8BAC1B,MAAOR,GACL9B,EAASuF,QAAQvB,EAAA,QAAO1B,8BAA+BR,MAAO,gCAAkC7D,EAAUuH,aAAe,2CAIjI,QAASQ,GAAgB2K,GACjBvQ,IAAiBuQ,IAIjBvQ,GACAA,EAAa6R,oBAAoBlR,EAAIQ,QAASoO,IAGlDvP,EAAeuQ,KAIXvQ,EAAawQ,iBAAiB7P,EAAIQ,QAASoO,GACvCnP,GACAmB,MAKZ,QAASqD,GAAiB9G,GAEtB,IAAKD,IAAcuC,IAAcsH,EAC7B,KAAM,IAAI3T,OAAM,+DAOpB,IAAI8L,GAAe,IAQnB,IAN0D,OAAtD6H,EAAgBqM,gBAAgBlN,mBAA8Ba,EAAgBqM,gBAAgBlN,kBAAkB1S,OAAS,IAC3H0L,EAAe6H,EAAgBqM,gBAAgBlN,kBAAkB,IAE9C,OAAjBhH,GAA+E,OAAtD6H,EAAgBqM,gBAAgBnN,mBAA8Bc,EAAgBqM,gBAAgBnN,kBAAkBzS,OAAS,IACpJ0L,EAAe6H,EAAgBqM,gBAAgBnN,kBAAkB,IAE9C,OAAjB/G,EACF,KAAM,IAAI9L,OAAM,qDAElB,IAAIsc,GAAcxQ,EAAawQ,YAC3B2B,EAAU5R,EAAUqS,cAAcpC,EAAa,GAAI7a,YAAWsI,IAC9D0H,EAAekN,EAAmBV,EAASlU,EAG/CkU,GAAQxB,iBAAiB7P,EAAIe,MAAO8D,GACpCwM,EAAQxB,iBAAiB7P,EAAIgB,QAAS6D,GACtCwM,EAAQxB,iBAAiB7P,EAAIiB,MAAO4D,GACpCwM,EAAQxB,iBAAiB7P,EAAIkB,MAAO2D,GAGpC8J,EAAS5a,KAAK8Q,GACdlG,EAAI,sCAAwCkG,EAAa0C,gBACzDtI,EAASuF,QAAQvB,EAAA,QAAOrB,qBAAsBjE,KAAMkH,IAGxD,QAAS8C,GAAiB9C,EAAc7D,GAEpC,GAAIqQ,GAAUxM,EAAawM,OAEtB7S,GAAwBgJ,WAAWtK,GAKpCmU,EAAQa,OAAO,GAAIrd,YAAWmM,EAAQiR,UAHtCZ,EAAQa,OAAO,GAAIrd,YAAWmM,IAatC,QAAS8D,GAAgBD,GAErB,GAAIwM,GAAUxM,EAAawM,OAG3BA,GAAQH,oBAAoBlR,EAAIe,MAAO8D,GACvCwM,EAAQH,oBAAoBlR,EAAIgB,QAAS6D,GACzCwM,EAAQH,oBAAoBlR,EAAIiB,MAAO4D,GACvCwM,EAAQH,oBAAoBlR,EAAIkB,MAAO2D,EAGvC,KAAK,GAAI1R,GAAI,EAAGA,EAAIwb,EAASnb,OAAQL,IACjC,GAAIwb,EAASxb,KAAO0R,EAAc,CAC9B8J,EAASgE,OAAOxf,EAAE,EAClB,OAKRke,EAAQrR,EAAIc,WAGhB,QAASiE,MACT,QAASL,MACT,QAASE,MAGT,QAASiK,KACL,OACIuB,YAAa,SAAUxJ,GACnB,OAAQA,EAAMyJ,MAEV,IAAKrQ,GAAIQ,QACL,GAAIoG,EAAMzJ,SAAU,CAChB,GAAIA,GAAWyM,YAAYC,OAAOjD,EAAMzJ,UAAYyJ,EAAMzJ,SAASO,OAASkJ,EAAMzJ,QAClF8B,GAASuF,QAAQvB,EAAA,QAAOf,UAAWiH,IAAK,GAAAmH,GAAA,QAAYnT,EAAU,cAYtF,QAASyD,KACL,GAAIyS,GAAiB,KACfC,EAAY,WACdjU,EAAa6R,oBAAoB,iBAAkBmC,GACnDhU,EAAaW,EAAIY,cAAcnB,GAC/BR,EAASuF,QAAQvB,EAAA,QAAOV,wBAExBlD,GAAawJ,YAAc,EAC3ByK,KAEAD,EAAiBC,EAAUC,KAAKhhB,MAChC8M,EAAawQ,iBAAiB,iBAAkBwD,IAOxD,QAAStB,GAAmByB,EAAYrW,GACpC,OAEIkU,QAASmC,EACTrW,SAAUA,EAEVoK,aAAc,WACV,MAAOhV,MAAK8e,QAAQb,WAGxBR,kBAAmB,WACf,MAAOC,MAGXC,eAAgB,WACZ,MAAO,aAKXE,YAAa,SAAUxJ,GACnB,OAAQA,EAAMyJ,MAEV,IAAKrQ,GAAIe,MAEL9B,EAASuF,QAAQvB,EAAA,QAAOxB,WAAa9D,KAAM,GAAAgT,GAAA,QAAape,KADzC,aAEf,MAAM,KACLyN,GAAIgB,QACL,GAAIA,GAAU4I,YAAYC,OAAOjD,EAAM5F,SAAW4F,EAAM5F,QAAQtD,OAASkJ,EAAM5F,OAC/E/B,GAASuF,QAAQvB,EAAA,QAAO3B,sBAAwB3D,KAAM,GAAAmT,GAAA,QAAeve,KAAMyO,EAAS4F,EAAM6M,iBAC1F,MAAM,KACLzT,GAAIiB,MACLtC,EAAI,mBACJM,EAASuF,QAAQvB,EAAA,QAAOzB,UACxB,MAAM,KAELxB,GAAIkB,MACLvC,EAAI,qCAAuCpM,KAAKgV,gBAChDtI,EAASuF,QAAQvB,EAAA,QAAOtB,oBAAsBhE,KAAMpL,KAAKgV,oBA9S7E,GAAIlS,GAAU9C,KAAK8C,QACf4J,EAAWzE,EAAOyE,SAClBN,EAAMnE,EAAOmE,IACbqB,EAAMxF,EAAOwF,IAGbxK,MAAQiB,GACR4I,MAAY5I,GACZyG,MAASzG,GACTgJ,MAAShJ,GACTsQ,MAAetQ,GACfkY,MAAQlY,GACRmY,MAAYnY,GACZ+H,MAAuB/H,EAyT3B,OAjBAjB,IACI8O,eAAgBA,EAChBuC,uBAAwBA,EACxBG,aAAcA,EACdhD,gBAAiBA,EACjBiB,gBAAiBA,EACjBhB,iBAAkBA,EAClB0D,iBAAkBA,EAClB7C,gBAAiBA,EACjBC,qBAAsBA,EACtBL,eAAgBA,EAChBE,iBAAkBA,EAClBgB,MAAOA,GAGXlD,IAEOlN,2DAjVyB,eAChB,eACC,eACE,eACY,eACP,eACT,cACM,SA6UzBud,GAAyBvc,sBAAwB,qCAClC2K,EAAA,QAAa7K,gBAAgByc,2JCjV5C,QAASW,KAIL,QAASvL,GAAwBL,EAAK9G,GAElC,GAAMuK,GAAUC,KAAKC,MAAMvX,OAAOC,aAAayC,MAAM,KAAM,GAAI/B,YAAWmM,IAC1E8G,IAAO,IACP,KAAK,GAAI3U,GAAI,EAAGA,EAAIoY,EAAQI,KAAKnY,OAAQL,IACrC2U,GAAOyD,EAAQI,KAAKxY,GAAK,GAG7B,OADA2U,GAAMA,EAAI6L,UAAU,EAAG7L,EAAItU,OAAS,GAIxC,QAAS6U,KACL,MAAO,MAGX,QAASE,KACL,MAAO,OAGX,QAASG,GAAkBkL,GACvB,IAAKA,EAAenc,eAAe,QAC/B,MAAO,KAGX,KAAK,GADDiU,MACKvY,EAAI,EAAGA,EAAIygB,EAAexT,KAAK5M,OAAQL,IAAK,CACjD,GAAI0gB,GAAUD,EAAexT,KAAKjN,GAC9B2gB,EAAQD,EAAQE,IAAIC,QAAQ,KAAM,IAClC7K,EAAM0K,EAAQI,EAAED,QAAQ,KAAM,GAElCtI,GAAS3X,KAAK,GAAA+X,GAAA,QAAYgI,EAAO3K,IAErC,MAAO,IAAA4C,GAAA,QAAmBL,GAG9B,QAAS5C,GAAiB8K,GACtB,MAAO1f,QAAOC,aAAayC,MAAM,KAAM,GAAI/B,YAAW+e,IAW1D,OAPIzL,wBAAyBA,EACzBE,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBI,iBAAkBA,4DAnDN,eACO,eACF,SAuDzB4K,GAASld,sBAAwB,qBAClB2K,EAAA,QAAalK,oBAAoByc,+HC1DhD,QAASQ,KAyBL,QAAS/L,GAAwBL,GAC7B,MAAOA,GAGX,QAASO,KACL,MAAO,OAGX,QAASE,GAAgB4L,GACrB,MAAOxR,GAAWwR,GAAc7L,aAGpC,QAASI,GAAkBkL,EAAgBO,GACvC,MAAOxR,GAAWwR,GAAczL,kBAAkBkL,GAGtD,QAAS9K,GAAiB8K,EAAgBO,GACtC,MAAOxR,GAAWwR,GAAcrL,iBAAiB8K,GAxCrD,GAAMjR,IACFyR,sBACI9L,aAAc,OACdI,kBAAmB,SAAUC,GACzB,MAAOnL,GAAA,QAAO9I,YAAYiU,EAAS0L,UAEvCvL,iBAAkB,SAAUH,GACxB,MAAOA,KAGf2L,2BACIhM,aAAc,cACdI,kBAAmB,SAAUC,GACzB,MAAOA,IAEXG,iBAAkB,SAAUH,GACxB,MAAOzU,QAAOC,aAAayC,MAAM,KAAM,GAAI/B,YAAW8T,MAmClE,QAPIR,wBAAyBA,EACzBE,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBI,iBAAkBA,4DArDD,cACN,SA0DnBoL,GAAS1d,sBAAwB,qBAClB2K,EAAA,QAAalK,oBAAoBid,uHCxDhD,QAASK,KAIL,QAASpM,GAAwBL,GAC7B,MAAOA,GAGX,QAASO,KACL,MAAO,OAGX,QAASE,KACL,MAAO,cAGX,QAASG,GAAkBkL,GACvB,MAAOA,GAGX,QAAS9K,GAAiB8K,GACtB,MAAO1f,QAAOC,aAAayC,MAAM,KAAM,GAAI/B,YAAW+e,IAW1D,OAPIzL,wBAAyBA,EACzBE,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBI,iBAAkBA,4DA/BD,SAqCzByL,GAAU/d,sBAAwB,sBACnB2K,EAAA,QAAalK,oBAAoBsd,mHC7ChD,QAASC,KAIL,QAASrM,GAAwBL,GAC7B,MAAOA,GAGX,QAASO,KACL,MAAO,OAGX,QAASE,KACL,MAAO,cAGX,QAASG,GAAkBkL,GACvB,MAAOA,GAGX,QAAS9K,GAAiB8K,GACtB,MAAO1f,QAAOC,aAAayC,MAAM,KAAM,GAAI/B,YAAW+e,IAW1D,OAPIzL,wBAAyBA,EACzBE,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBI,iBAAkBA,4DA/BD,SAqCzB0L,GAAShe,sBAAwB,qBAClB2K,EAAA,QAAalK,oBAAoBud,wcChC1CC,EAAc,WAQL,QARTA,GAQU/I,EAAU2E,GAClB,UATFoE,GASMpE,GAAiB,eAATA,GAAkC,cAATA,EACjC,KAAM,IAAIjd,OAAM,6EACpBb,MAAKmZ,SAAWA,EAChBnZ,KAAK8d,KAAOA,WAZdoE,sBAoBG,WACD,GAAIthB,OAACsD,GACDie,EAAUniB,KAAKmZ,SAASlY,OACxBmhB,GAAOvU,QAEX,KAAKjN,EAAI,EAAGA,EAAIuhB,EAASvhB,IAAK,CAC1B,GAAIgW,IACAyL,IAAK,MACLC,IAAK,SACLd,IAAKxhB,KAAKmZ,SAASvY,GAAGgd,MACtB8D,EAAG1hB,KAAKmZ,SAASvY,GAAGgW,IAExBwL,GAAIvU,KAAKrM,KAAKoV,GAEd5W,KAAK8d,OACLsE,EAAItE,KAAO9d,KAAK8d,KAEpB,IAAIyE,GAAYtJ,KAAKuJ,UAAUJ,GACzB1D,EAAM6D,EAAUthB,OAGlBwhB,EAAM,GAAIpL,aAAYqH,GACtBgE,EAAQ,GAAIpgB,YAAWmgB,EAC3B,KAAK7hB,EAAI,EAAGA,EAAI8d,EAAK9d,IACjB8hB,EAAM9hB,GAAK2hB,EAAUhhB,WAAWX,EACpC,OAAO6hB,OA7CTP,eAiDSA,8MClDTS,GAOS,QAPTA,GAOUrQ,EAAcsQ,UAPxBD,GAQE3iB,KAAKsS,aAAeA,EACpBtS,KAAKwO,MAAQoU,aAIND,8MCdTE,GAUS,QAVTA,GAUUvQ,EAAc7D,EAAS+P,EAAY5J,UAV7CiO,GAWE7iB,KAAKsS,aAAeA,EACpBtS,KAAKyO,QAAUA,EACfzO,KAAKwe,WAAaA,EAClBxe,KAAK4U,YAAcA,GAA4B,6BAIxCiO,8MClBTC,GAOS,QAPTA,GAOUlF,EAAOhH,UAPjBkM,GAQE9iB,KAAK4d,MAAQA,EACb5d,KAAK4W,IAAMA,aAIJkM,8MCXTC,GASS,QATTA,GASUpY,EAAWkW,UATrBkC,GAUE/iB,KAAK2K,UAAYA,EACjB3K,KAAK6gB,gBAAkBA,aAIhBkC,8MCfTC,GAgBS,QAhBTA,GAgBUtP,EAAmBC,EAAmBsP,EAAuBC,EAAiBC,UAhBxFH,GAiBEhjB,KAAKojB,eAAkB,QACnB1P,GAAqBA,EAAkBzS,SACvCjB,KAAK0T,kBAAoBA,GAEzBC,GAAqBA,EAAkB1S,SACvCjB,KAAK2T,kBAAoBA,GAE7B3T,KAAKijB,sBAAwBA,EAC7BjjB,KAAKkjB,gBAAkBA,EACvBljB,KAAKmjB,aAAeA,aAIbH,8MChCTK,GAOS,QAPTA,GAOUlG,EAAamG,UAPvBD,GAQErjB,KAAKmd,YAAcA,EACnBnd,KAAKsjB,WAAaA,aAIXD,8MCbTE,GAMS,QANTA,GAMU3Y,EAAUuM,UANpBoM,GAOEvjB,KAAK4K,SAAWA,EAChB5K,KAAKmX,aAAeA,aAIboM","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* $Date: 2007-06-12 18:02:31 $ */\n\n// from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/\n// Handles encode/decode of ASCII and Unicode strings.\n\nvar UTF8 = {};\nUTF8.encode = function(s) {\n    var u = [];\n    for (var i = 0; i < s.length; ++i) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            u.push(c);\n        } else if (c < 0x800) {\n            u.push(0xC0 | (c >> 6));\n            u.push(0x80 | (63 & c));\n        } else if (c < 0x10000) {\n            u.push(0xE0 | (c >> 12));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        } else {\n            u.push(0xF0 | (c >> 18));\n            u.push(0x80 | (63 & (c >> 12)));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        }\n    }\n    return u;\n};\nUTF8.decode = function(u) {\n    var a = [];\n    var i = 0;\n    while (i < u.length) {\n        var v = u[i++];\n        if (v < 0x80) {\n            // no need to mask byte\n        } else if (v < 0xE0) {\n            v = (31 & v) << 6;\n            v |= (63 & u[i++]);\n        } else if (v < 0xF0) {\n            v = (15 & v) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        } else {\n            v = (7 & v) << 18;\n            v |= (63 & u[i++]) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        }\n        a.push(String.fromCharCode(v));\n    }\n    return a.join('');\n};\n\nvar BASE64 = {};\n(function(T){\n    var encodeArray = function(u) {\n        var i = 0;\n        var a = [];\n        var n = 0 | (u.length / 3);\n        while (0 < n--) {\n            var v = (u[i] << 16) + (u[i+1] << 8) + u[i+2];\n            i += 3;\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push(T.charAt(63 & v));\n        }\n        if (2 == (u.length - i)) {\n            var v = (u[i] << 16) + (u[i+1] << 8);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push('=');\n        } else if (1 == (u.length - i)) {\n            var v = (u[i] << 16);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push('==');\n        }\n        return a.join('');\n    }\n    var R = (function(){\n        var a = [];\n        for (var i=0; i<T.length; ++i) {\n            a[T.charCodeAt(i)] = i;\n        }\n        a['='.charCodeAt(0)] = 0;\n        return a;\n    })();\n    var decodeArray = function(s) {\n        var i = 0;\n        var u = [];\n        var n = 0 | (s.length / 4);\n        while (0 < n--) {\n            var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i+1)] << 12) + (R[s.charCodeAt(i+2)] << 6) + R[s.charCodeAt(i+3)];\n            u.push(255 & (v >> 16));\n            u.push(255 & (v >> 8));\n            u.push(255 & v);\n            i += 4;\n        }\n        if (u) {\n            if ('=' == s.charAt(i-2)) {\n                u.pop();\n                u.pop();\n            } else if ('=' == s.charAt(i-1)) {\n                u.pop();\n            }\n        }\n        return u;\n    }\n    var ASCII = {};\n    ASCII.encode = function(s) {\n        var u = [];\n        for (var i = 0; i<s.length; ++i) {\n            u.push(s.charCodeAt(i));\n        }\n        return u;\n    };\n    ASCII.decode = function(u) {\n        for (var i = 0; i<s.length; ++i) {\n            a[i] = String.fromCharCode(a[i]);\n        }\n        return a.join('');\n    };\n    BASE64.decodeArray = function(s) {\n        var u = decodeArray(s);\n        return new Uint8Array(u);\n    };\n    BASE64.encodeASCII = function(s) {\n        var u = ASCII.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decodeASCII = function(s) {\n        var a = decodeArray(s);\n        return ASCII.decode(a);\n    };\n    BASE64.encode = function(s) {\n        var u = UTF8.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decode = function(s) {\n        var u = decodeArray(s);\n        return UTF8.decode(u);\n    };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\n/*The following polyfills are not used in dash.js but have caused multiplayer integration issues.\n Therefore commenting them out.\nif (undefined === btoa) {\n    var btoa = BASE64.encode;\n}\nif (undefined === atob) {\n    var atob = BASE64.decode;\n}\n*/\n\nif (typeof exports !== 'undefined') {\n    exports.decode = BASE64.decode;\n    exports.decodeArray = BASE64.decodeArray;\n}\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nlet FactoryMaker = (function () {\n\n    let instance;\n    let extensions = [];\n    let singletonContexts = [];\n    let singletonFactories = [];\n    let classFactories = [];\n\n    function extend(name, childInstance, override, context) {\n        let extensionContext = getExtensionContext(context);\n        if (!extensionContext[name] && childInstance) {\n            extensionContext[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function registerFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n        factoriesArray.push({\n            name: name,\n            factory: factory\n        });\n    }\n\n    function getFactoryByName(name, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                return factoriesArray[i].factory;\n            }\n        }\n        return null;\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                            context: context\n                        }, arguments), context, arguments);\n                    }\n                };\n            };\n\n            registerFactory(classConstructor.__dashjs_factory_name, factory, classFactories); // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                                context: context\n                            }, arguments), context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            registerFactory(classConstructor.__dashjs_factory_name, factory, singletonFactories); // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(name, classConstructor, context, args) {\n        // Add getClassName function to class instance prototype (used by Debug)\n        classConstructor.getClassName = function () {return name;};\n\n        let extensionContext = getExtensionContext(context);\n        let extensionObject = extensionContext[name];\n        if (extensionObject) {\n            let extension = extensionObject.instance;\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n                extension = extension.apply({\n                    context: context,\n                    factory: instance,\n                    parent: classConstructor\n                }, args);\n                for (const prop in extension) {\n                    if (classConstructor.hasOwnProperty(prop)) {\n                        classConstructor[prop] = extension[prop];\n                    }\n                }\n            } else { //replace parent object completely with new object. Same as dijon.\n                return extension.apply({\n                    context: context,\n                    factory: instance\n                }, args);\n            }\n        }\n        return classConstructor;\n    }\n\n    function getExtensionContext(context) {\n        let extensionContext;\n        extensions.forEach(function (obj) {\n            if (obj === context) {\n                extensionContext = obj;\n            }\n        });\n        if (!extensionContext) {\n            extensionContext = extensions.push(context);\n        }\n        return extensionContext;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from './EventsBase';\n\n/**\n * These are internal events that should not be needed at the player level.\n * If you find and event in here that you would like access to from MediaPlayer level\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\n * @class\n * @ignore\n */\nclass CoreEvents extends EventsBase {\n    constructor () {\n        super();\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\n        this.BUFFER_CLEARED = 'bufferCleared';\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\n        this.BYTES_APPENDED = 'bytesAppended';\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\n        this.INIT_REQUESTED = 'initRequested';\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\n        this.LOADING_COMPLETED = 'loadingCompleted';\n        this.LOADING_PROGRESS = 'loadingProgress';\n        this.MANIFEST_UPDATED = 'manifestUpdated';\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\n        this.REPRESENTATION_UPDATED = 'representationUpdated';\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\n        this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\n        this.SOURCEBUFFER_APPEND_COMPLETED = 'sourceBufferAppendCompleted';\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\n        this.STREAMS_COMPOSED = 'streamsComposed';\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\n        this.STREAM_COMPLETED = 'streamCompleted';\n        this.TIMED_TEXT_REQUESTED = 'timedTextRequested';\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\n        this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\n        this.XLINK_READY = 'xlinkReady';\n    }\n}\n\nexport default CoreEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nimport CoreEvents from './CoreEvents';\nclass Events extends CoreEvents {\n}\nlet events = new Events();\nexport default events;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n */\nclass Constants {\n\n    init () {\n        this.STREAM = 'stream';\n        this.VIDEO = 'video';\n        this.AUDIO = 'audio';\n        this.TEXT = 'text';\n        this.FRAGMENTED_TEXT = 'fragmentedText';\n        this.EMBEDDED_TEXT = 'embeddedText';\n        this.MUXED = 'muxed';\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.STPP = 'stpp';\n        this.TTML = 'ttml';\n        this.VTT = 'vtt';\n        this.WVTT = 'wvtt';\n        this.UTF8 = 'utf-8';\n        this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new Constants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BASE64 from '../../../externals/base64';\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data);\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n\n    let instance;\n    let context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n\n        let controller = null;\n\n        let protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({log: config.log});\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                adapter: config.adapter,\n                eventBus: config.eventBus,\n                log: config.log\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n\n        let log = config.log;\n        let eventBus = config.eventBus;\n        let errHandler = config.errHandler;\n        let videoElement = config.videoModel.getElement();\n\n        if (videoElement.onencrypted !== undefined &&\n            videoElement.mediaKeys !== undefined &&\n            navigator.requestMediaKeySystemAccess !== undefined &&\n            typeof navigator.requestMediaKeySystemAccess === 'function') {\n\n            log('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({log: log, eventBus: eventBus});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n\n            log('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({log: log, eventBus: eventBus, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014)});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n\n            log('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({log: log, eventBus: eventBus, errHandler: errHandler, api: getAPI(videoElement, APIS_ProtectionModel_01b)});\n\n        } else {\n\n            log('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n\n        for (let i = 0; i < apis.length; i++) {\n            let api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nlet factory = FactoryMaker.getClassFactory(Protection);\nfactory.events = ProtectionEvents;\nFactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory);\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../../streaming/constants/Constants';\nimport CommonEncryption from '../CommonEncryption';\nimport Events from '../../../core/events/Events';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Protection from '../Protection';\nimport BASE64 from '../../../../externals/base64';\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    let protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    let adapter = config.adapter;\n    let eventBus = config.eventBus;\n    let log = config.log;\n\n    let instance,\n        keySystems,\n        pendingNeedKeyData,\n        audioInfo,\n        videoInfo,\n        protDataSet,\n        initialized,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        keySystems = protectionKeyController.getKeySystems();\n        pendingNeedKeyData = [];\n        initialized = false;\n        sessionType = 'temporary';\n        robustnessLevel = '';\n\n        Events.extend(Protection.events);\n    }\n\n    /**\n     * Initialize this protection system with a given manifest and optional audio\n     * and video stream information.\n     *\n     * @param {Object} manifest the json version of the manifest XML document for the\n     * desired content.  Applications can download their manifest using\n     * {@link module:MediaPlayer#retrieveManifest}\n     * @param {StreamInfo} [aInfo] audio stream information\n     * @param {StreamInfo} [vInfo] video stream information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initialize(manifest, aInfo, vInfo) {\n\n        // TODO: We really need to do much more here... We need to be smarter about knowing\n        // which adaptation sets for which we have initialized, including the default key ID\n        // value from the ContentProtection elements so we know whether or not we still need to\n        // select key systems and acquire keys.\n        if (!initialized) {\n\n            let streamInfo;\n\n            if (!aInfo && !vInfo) {\n                // Look for ContentProtection elements.  InitData can be provided by either the\n                // dash264drm:Pssh ContentProtection format or a DRM-specific format.\n                streamInfo = adapter.getStreamsInfo()[0]; // TODO: Single period only for now. See TODO above\n            }\n\n            audioInfo = aInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.AUDIO) : null);\n            videoInfo = vInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.VIDEO) : null);\n            let mediaInfo = (videoInfo) ? videoInfo : audioInfo; // We could have audio or video only\n\n            // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n            // and video will be the same.  Just use one valid MediaInfo object\n            let supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n            if (supportedKS && supportedKS.length > 0) {\n                selectKeySystem(supportedKS, true);\n            }\n\n            initialized = true;\n        }\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData) {\n        let initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            let currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    log('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, sessionType);\n            } catch (error) {\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Error creating key session! ' + error.message});\n            }\n        } else {\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!'});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID) {\n        protectionModel.loadKeySession(sessionID);\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(Events.NEED_KEY, onNeedKey, this);\n            eventBus.on(Events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(Events.NEED_KEY, onNeedKey, this);\n            eventBus.off(Events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n    }\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions.  In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        let keySystemString = keySystem.systemString;\n\n        if (protDataSet) {\n            protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n        }\n        return protData;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n\n        let self = this;\n\n        // Build our request object for requestKeySystemAccess\n        let audioCapabilities = [];\n        let videoCapabilities = [];\n\n        if (videoInfo) {\n            videoCapabilities.push(new MediaCapability(videoInfo.codec, robustnessLevel));\n        }\n        if (audioInfo) {\n            audioCapabilities.push(new MediaCapability(audioInfo.codec, robustnessLevel));\n        }\n        let ksConfig = new KeySystemConfiguration(\n                audioCapabilities, videoCapabilities, 'optional',\n                (sessionType === 'temporary') ? 'optional' : 'required',\n                [sessionType]);\n        let requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [ksConfig]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    let onKeySystemAccessComplete = function (event) {\n                        eventBus.off(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                            }\n                        } else {\n                            log('DRM: KeySystem Access Granted');\n                            eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            createKeySession(supportedKS[ksIdx].initData);\n                        }\n                    };\n                    eventBus.on(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [ksConfig]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(Events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n\n                    if (!fromManifest) {\n                        eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    log('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(Events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    let protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData);\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(Events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: Error selecting key system! -- ' + event.error});\n                    }\n                }\n            };\n            eventBus.on(Events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(Events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(Events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyMessage(e) {\n        log('DRM: onKeyMessage');\n        if (e.error) {\n            log(e.error);\n            return;\n        }\n\n        // Dispatch event to applications indicating we received a key message\n        let keyMessage = e.data;\n        eventBus.trigger(Events.KEY_MESSAGE, {data: keyMessage});\n        let messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        let message = keyMessage.message;\n        let sessionToken = keyMessage.sessionToken;\n        let protData = getProtData(keySystem);\n        let keySystemString = keySystem.systemString;\n        let licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        let eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            log('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            let clearkeys = protectionKeyController.processClearKeyLicenseRequest(protData, message);\n            if (clearkeys)  {\n                log('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        let xhr = new XMLHttpRequest();\n\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            let serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: No license server URL specified!');\n            return;\n        }\n\n        xhr.open(licenseServerData.getHTTPMethod(messageType), url, true);\n        xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        xhr.onload = function () {\n            if (this.status == 200) {\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken,\n                        licenseServerData.getLicenseMessage(this.response, keySystemString, messageType));\n            } else {\n                sendLicenseRequestCompleteEvent(eventData,\n                        'DRM: ' + keySystemString + ' update, XHR status is \"' + this.statusText + '\" (' + this.status +\n                        '), expected to be 200. readyState is ' + this.readyState +\n                        '.  Response is ' + ((this.response) ? licenseServerData.getErrorResponse(this.response, keySystemString, messageType) : 'NONE'));\n            }\n        };\n        xhr.onabort = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR aborted. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n        xhr.onerror = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR error. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const updateHeaders = function (headers) {\n            let key;\n            if (headers) {\n                for (key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        xhr.withCredentials = true;\n                    }\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Set withCredentials property from protData\n        if (protData && protData.hasOwnProperty('withCredentials')) {\n            xhr.withCredentials = protData.withCredentials;\n        }\n\n        xhr.send(keySystem.getLicenseRequestFromMessage(message));\n    }\n\n    function onNeedKey(event) {\n        log('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            log('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        log('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        let supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            log('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    instance = {\n        initialize: initialize,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default FactoryMaker.getClassFactory(ProtectionController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        log,\n        keySystems,\n        clearkeyKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.log) {\n            log = config.log;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance();\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance();\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance();\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            let keySystemString = keySystems[ksIdx].systemString;\n            let shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (keySystems[ksIdx].uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: keySystems[ksIdx],\n                    initData: pssh[keySystems[ksIdx].uuid]\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance();\n        } else if (keySystem.systemString === 'com.widevine.alpha') {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === 'com.microsoft.playready') {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === 'org.w3.clearkey') {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            log('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default FactoryMaker.getSingletonFactory(ProtectionKeyController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = 'org.w3.clearkey';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey() {\n\n    let instance;\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            let jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            let keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                let clearkeyID = jsonMsg.kids[i];\n                let clearkey = (protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default FactoryMaker.getSingletonFactory(KeySystemClearKey);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport BASE64 from '../../../../externals/base64';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = 'com.microsoft.playready';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemPlayReady() {\n\n    let instance;\n    let messageFormat = 'utf16';\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let headers = {};\n        let parser = new DOMParser();\n        let dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        let headerNameList = xmlDoc.getElementsByTagName('name');\n        let headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let licenseRequest = null;\n        let parser = new DOMParser();\n        let dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            let Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        }\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            let data = new DataView(initData);\n            let numRecords = data.getUint16(4, true);\n            let offset = 6;\n            let parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                let recordType = data.getUint16(offset, true);\n                offset += 2;\n                let recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                let recordData = initData.slice(offset, offset + recordLength);\n                let record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                let xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    let laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    let luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        let PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        let playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default FactoryMaker.getSingletonFactory(KeySystemPlayReady);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = 'com.widevine.alpha';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine() {\n\n    let instance;\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default FactoryMaker.getSingletonFactory(KeySystemWidevine);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ProtectionModel_01b(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    let log = config.log;\n    let api = config.api;\n    let errHandler = config.errHandler;\n\n    let instance,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(Events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(Events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n\n            let newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        let sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), sessionToken.initData, sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(Events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n                                    break;\n                                case 2:\n                                    msg += 'MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.';\n                                    break;\n                                case 3:\n                                    msg += 'MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.';\n                                    break;\n                                case 4:\n                                    msg += 'MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.';\n                                    break;\n                                case 5:\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.';\n                                    break;\n                                case 6:\n                                    msg += 'MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(Events.KEY_ERROR, {data: new KeyError(sessionToken, msg)});\n                        } else {\n                            log('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            log('DRM: Key added.');\n                            eventBus.trigger(Events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            log('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError('Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!');\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(Events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            log('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default FactoryMaker.getClassFactory(ProtectionModel_01b);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    let log = config.log;\n\n    let instance,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(Events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            }\n\n        }).catch(function () {\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            videoElement.setMediaKeys(null);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            log('DRM: License server certificate successfully updated.');\n            eventBus.trigger(Events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(Events.SERVER_CERTIFICATE_UPDATED, {error: 'Error updating server certificate -- ' + error.name});\n        });\n    }\n\n    function createKeySession(initData, sessionType) {\n\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        let session = mediaKeys.createSession(sessionType);\n        let sessionToken = createSessionToken(session, initData, sessionType);\n\n        // Generate initial key request\n        session.generateRequest('cenc', initData).then(function () {\n            log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Error generating key request -- ' + error.name});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(Events.KEY_ERROR, {data: new KeyError(sessionToken, 'Error sending update() message! ' + error.name)});\n        });\n    }\n\n    function loadKeySession(sessionID) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        let session = mediaKeys.createSession();\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                let sessionToken = createSessionToken(session);\n                log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session! Invalid Session ID (' + sessionID + ')'});\n            }\n        }).catch(function (error) {\n            eventBus.trigger(Events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session (' + sessionID + ')! ' + error.name});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        let session = sessionToken.session;\n\n        session.remove().then(function () {\n            log('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(Events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(Events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n        (function (i) {\n            let keySystem = ksConfigurations[i].ks;\n            let configs = ksConfigurations[i].configs;\n            navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function (mediaKeySystemAccess) {\n\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                let configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                let keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function () {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied!'});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(Events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType) {\n\n        let token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(Events.KEY_STATUSES_CHANGED, {data: this});\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(Events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            log('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(Events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default FactoryMaker.getClassFactory(ProtectionModel_21Jan2015);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    let log = config.log;\n    let api = config.api;\n\n\n    let instance,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(Events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(Events.TEARDOWN_COMPLETE, {error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message});\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {data: new KeySystemAccess(ks, ksConfig)});\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(Events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(Events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities !== null && keySystemAccess.ksConfiguration.videoCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities !== null && keySystemAccess.ksConfiguration.audioCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n\n        if (capabilities === null)\n          throw new Error('Can not create sessions for unknown content types.');\n\n        let contentType = capabilities.contentType;\n        let session = mediaKeys.createSession(contentType, new Uint8Array(initData));\n        let sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(Events.KEY_SESSION_CREATED, {data: sessionToken});\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(Events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(Events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(Events.KEY_ERROR, { data: new KeyError(this, errorStr) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(Events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        log('DRM: Key added.');\n                        eventBus.trigger(Events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        log('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(Events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default FactoryMaker.getClassFactory(ProtectionModel_3Feb2014);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url, message/*, messageType*/) {\n        // Build ClearKey server query string\n        const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        url += '/?';\n        for (let i = 0; i < jsonMsg.kids.length; i++) {\n            url += jsonMsg.kids[i] + '&';\n        }\n        url = url.substring(0, url.length - 1);\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'GET';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default FactoryMaker.getSingletonFactory(ClearKey);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport BASE64 from '../../../../externals/base64';\n\nfunction DRMToday() {\n\n    const keySystems = {\n        'com.widevine.alpha': {\n            responseType: 'json',\n            getLicenseMessage: function (response) {\n                return BASE64.decodeArray(response.license);\n            },\n            getErrorResponse: function (response) {\n                return response;\n            }\n        },\n        'com.microsoft.playready': {\n            responseType: 'arraybuffer',\n            getLicenseMessage: function (response) {\n                return response;\n            },\n            getErrorResponse: function (response) {\n                return String.fromCharCode.apply(null, new Uint8Array(response));\n            }\n        }\n    };\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default FactoryMaker.getSingletonFactory(DRMToday);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction PlayReady() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default FactoryMaker.getSingletonFactory(PlayReady);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default FactoryMaker.getSingletonFactory(Widevine);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc EME-independent KeyError\n * @ignore\n */\nclass KeyError {\n    /**\n     * @param {Object} sessionToken the key session to which this error is associated\n     * @param {string} errorString an informational error message\n     * @class\n     * @deprecated Newest versions of EME APIs will not use this error object\n     */\n    constructor(sessionToken, errorString) {\n        this.sessionToken = sessionToken;\n        this.error = errorString;\n    }\n}\n\nexport default KeyError;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n"]}